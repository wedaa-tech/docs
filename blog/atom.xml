<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wedaa.tech/docs/blog</id>
    <title>WeDAA Blog</title>
    <updated>2024-05-01T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wedaa.tech/docs/blog"/>
    <subtitle>WeDAA Blog</subtitle>
    <icon>https://wedaa.tech/docs/img/logo.png</icon>
    <entry>
        <title type="html"><![CDATA[Definitive Guide to Knative Serving—A Deep Dive into Theory and Architecture]]></title>
        <id>https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01</id>
        <link href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01"/>
        <updated>2024-05-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A Deep Dive into Theory and Architecture of Knative Serving]]></summary>
        <content type="html"><![CDATA[<p>If you missed the first installment of our Knative series, you can catch up by diving into our previous blog post:
<a href="https://www.wedaa.tech/docs/blog/2024/04/13/overview-on-knative" target="_blank" rel="noopener noreferrer">Dive into Knative—Explore Serverless with Kubernetes</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#overview" class="hash-link" aria-label="Direct link to Overview" title="Direct link to Overview">​</a></h2>
<p><img loading="lazy" alt="Overview" src="https://wedaa.tech/docs/assets/images/00-overview-864fc8c0625a8618b6b29f81448f516c.png" width="625" height="313" class="img_ev3q"></p><p align="center"><a href="https://technologyconversations.com/2020/08/19/serverless-computing-with-knative-and-containers-as-a-service-caas/" target="_blank" rel="noopener noreferrer">Technology Conversations</a></p><p></p>
<p>The key aspects and benefits of Knative Serving:</p>
<ol>
<li><strong>Serverless Platform</strong>: Knative Serving is a serverless platform built on top of Kubernetes.</li>
<li><strong>Deployment Simplification</strong>: It simplifies the deployment of containerized applications on Kubernetes.</li>
<li><strong>Auto-scaling</strong>: Automatically scales applications based on demand, ensuring optimal resource utilization.</li>
<li><strong>Traffic Management</strong>: Provides features for managing traffic routing, allowing seamless updates and rollbacks.</li>
<li><strong>Focus on Development</strong>: Abstracts away infrastructure management complexities, enabling developers to focus on writing and deploying code.</li>
<li><strong>Cloud-Native Applications</strong>: Facilitates the development of modern, scalable, and resilient cloud-native applications.</li>
</ol>
<p>For an introductory exploration of Knative Serving, delve into our dedicated <a href="https://www.wedaa.tech/docs/blog/2024/04/13/overview-on-knative#knative-serving" target="_blank" rel="noopener noreferrer">Knative Serving</a> section.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="knative-serving-architecture">Knative Serving Architecture<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#knative-serving-architecture" class="hash-link" aria-label="Direct link to Knative Serving Architecture" title="Direct link to Knative Serving Architecture">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="architecture-diagram">Architecture Diagram<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#architecture-diagram" class="hash-link" aria-label="Direct link to Architecture Diagram" title="Direct link to Architecture Diagram">​</a></h3>
<p>Knative Serving consists of several components forming the backbone of the Serverless Platform. This blog explains the high-level architecture of Knative Serving.</p>
<p><img loading="lazy" alt="Architecture" src="https://wedaa.tech/docs/assets/images/01-architecture-f34a59cc6df015d89698eaaf7c37498f.png" width="650" height="614" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="components">Components<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#components" class="hash-link" aria-label="Direct link to Components" title="Direct link to Components">​</a></h3>
<ul>
<li><strong>Activator</strong>: The activator is part of the [data-plane]. It is responsible to queue incoming requests (if a Knative Service is scaled-to-zero). It communicates with the autoscaler to bring scaled-to-zero Services back up and forward the queued requests. Activator can also act as a request buffer to handle traffic bursts.</li>
<li><strong>Autoscaler</strong>: The autoscaler is responsible to scale the Knative Services based on configuration, metrics and incoming requests.</li>
<li><strong>Controller</strong>: The controller manages the state of Knative resources within the cluster. It watches several objects, manages the lifecycle of dependent     resources, and updates the resource state.</li>
<li><strong>Queue-Proxy</strong>:	The Queue-Proxy is a sidecar container in the Knative Service's Pod. It is responsible to collect metrics and enforcing the desired concurrency when forwarding requests to the user's container. It can also act as a queue if necessary, similar to the Activator.</li>
<li><strong>Webhooks</strong>:	Knative Serving has several webhooks responsible to validate and mutate Knative Resources.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="http-request-flows">HTTP Request Flows<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#http-request-flows" class="hash-link" aria-label="Direct link to HTTP Request Flows" title="Direct link to HTTP Request Flows">​</a></h3>
<p>This explains the behavior and flow of HTTP requests to an application which is running on Knative Serving.</p>
<p><img loading="lazy" alt="HTTP Request Flows" src="https://wedaa.tech/docs/assets/images/02-http-request-flow-9ce25bf99935eeaf5fe92f4a2b9b15f6.png" width="938" height="436" class="img_ev3q"></p>
<ol>
<li><strong>Initial Request</strong>: When a user sends an HTTP request to your Knative service, it first hits the ingress gateway.</li>
<li><strong>Routing Decision</strong>: The ingress gateway examines the request to determine which Knative service should handle it based on the requested domain name.</li>
<li><strong>Service Activation</strong>: Knative Serving keeps your service deployed at all times. When a request arrives and no instances are running, it promptly activates a new instance by spinning up a pod.</li>
<li><strong>Scaling Decision</strong>: Knative Serving checks the current load and decides how many instances of the service need to be running to handle incoming requests efficiently.</li>
<li><strong>Activator Interaction</strong>: For the first-time request, it goes to the activator. The activator asks the auto scaler to scale up one pod to serve the initial request, ensuring rapid response and availability.</li>
<li><strong>Request Handling</strong>: The request is then forwarded to one of the instances of your service, where your application code processes it.</li>
<li><strong>Containerized Environment</strong>: Within each pod, there are two containers:<!-- -->
<ul>
<li>User Container: This container hosts your application code, serving user requests.</li>
<li>Queue Container: This container monitors metrics and observes concurrency levels.</li>
</ul>
</li>
<li><strong>Auto-scaling Based on Concurrency</strong>: When the concurrency exceeds the default level, the autoscaler spins up new pods to handle the increased concurrent requests, ensuring optimal performance.</li>
<li><strong>Response</strong>: After processing the request, your service generates a response, which is sent back through the same flow to the user who made the initial request.</li>
<li><strong>Scaling Down</strong>: If there is no more traffic or if the traffic decreases significantly, Knative Serving may scale down the number of running instances to save resources.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="revisions">Revisions<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#revisions" class="hash-link" aria-label="Direct link to Revisions" title="Direct link to Revisions">​</a></h3>
<ul>
<li>Revisions are Knative Serving resources representing snapshots of application code and configuration.</li>
<li>They are created automatically in response to updates in a Configuration spec.</li>
<li>Revisions cannot be directly created or updated; they are managed through Configuration changes.</li>
<li>Deletion of Revisions can be forced to handle resource leaks or remove problematic Revisions.</li>
<li>Revisions are generally immutable, but may reference mutable Kubernetes resources like ConfigMaps and Secrets.</li>
<li>Changes in Revision defaults can lead to syntactic mutations in Revisions, affecting configuration without altering their core behavior.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="autoscaling">Autoscaling<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#autoscaling" class="hash-link" aria-label="Direct link to Autoscaling" title="Direct link to Autoscaling">​</a></h3>
<p><img loading="lazy" alt="Kubernetes Autoscaling Options" src="https://wedaa.tech/docs/assets/images/03-autoscaling-32d8341a0ce844ed806be8ea539a2a17.png" width="800" height="430" class="img_ev3q"></p><p align="center"><a href="https://platform9.com/blog/kubernetes-autoscaling-options-horizontal-pod-autoscaler-vertical-pod-autoscaler-and-cluster-autoscaler/" target="_blank" rel="noopener noreferrer">Kubernetes Autoscaling Options</a></p><p></p>
<p>Knative Serving provides automatic scaling, or autoscaling, for applications to match incoming demand. This is provided by default, by using the Knative Pod Autoscaler (KPA).</p>
<p>For example, if an application is receiving no traffic and scale to zero is enabled, Knative Serving scales the application down to zero replicas. If scaling to zero is disabled, the application is scaled down to the minimum number of replicas specified for applications on the cluster. Replicas are scaled up to meet demand if traffic to the application increases.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="supported-autoscaler-types">Supported Autoscaler types<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#supported-autoscaler-types" class="hash-link" aria-label="Direct link to Supported Autoscaler types" title="Direct link to Supported Autoscaler types">​</a></h4>
<p>Knative Serving supports the implementation of Knative Pod Autoscaler (KPA) and Kubernetes' Horizontal Pod Autoscaler (HPA).</p>
<ul>
<li>Knative Pod Autoscaler (KPA)<!-- -->
<ul>
<li>Part of the Knative Serving core and enabled by default once Knative Serving is installed.</li>
<li>Supports scale to zero functionality.</li>
<li>Does not support CPU-based autoscaling.</li>
</ul>
</li>
<li>Horizontal Pod Autoscaler (HPA)<!-- -->
<ul>
<li>Not part of the Knative Serving core, and you must install Knative Serving first.</li>
<li>Does not support scale to zero functionality.</li>
<li>Supports CPU-based autoscaling.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="knative-serving-autoscaling-system">Knative Serving Autoscaling System<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#knative-serving-autoscaling-system" class="hash-link" aria-label="Direct link to Knative Serving Autoscaling System" title="Direct link to Knative Serving Autoscaling System">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="apis">APIs<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#apis" class="hash-link" aria-label="Direct link to APIs" title="Direct link to APIs">​</a></h3>
<ol>
<li><strong>PodAutoscaler</strong> (PA):<!-- -->
<ul>
<li>API: <code>podautoscalers.autoscaling.internal.knative.dev</code></li>
<li>It's an abstraction that encompasses all possible PodAutoscalers, with the default implementation being the Knative Pod Autoscaler (KPA).</li>
<li>The PodAutoscaler manages the <code>scaling target</code>, the <code>metric</code> used for scaling, and other <code>relevant inputs</code> for the autoscaling decision-making process.<!-- -->
<ol>
<li><strong>Scaling Target</strong>: The PodAutoscaler determines what resource it should scale. This could be the number of pods, CPU utilization, memory consumption, or any other metric that indicates the workload's demand.</li>
<li><strong>Metric for Scaling</strong>: It specifies which metric or metrics should be used to make scaling decisions. For example, it might use CPU utilization to decide when to add or remove pods based on workload demand.</li>
<li><strong>Other Inputs</strong>: The PodAutoscaler considers additional factors beyond just the scaling metric. These could include constraints, policies, or thresholds that influence scaling decisions. For instance, it might have rules to prevent scaling beyond a certain limit or to ensure a minimum number of pods are always running.</li>
</ol>
</li>
<li>PodAutoscalers are automatically created from Revisions by default.</li>
</ul>
</li>
<li><strong>Metric</strong>:<!-- -->
<ul>
<li>API: <code>metrics.autoscaling.internal.knative.dev</code></li>
<li>This API controls the collector of the autoscaler, determining which service to scrape data from, how to aggregate it, and other related aspects.<!-- -->
<ol>
<li><strong>Collector Control</strong>: The API controls the collector component of the autoscaler. The collector is responsible for gathering data related to the performance and behavior of the services being monitored for autoscaling.</li>
<li><strong>Data Scraping</strong>: It determines which service or services the autoscaler should scrape data from. This involves collecting relevant metrics such as CPU utilization, request latency, or throughput from the specified services.</li>
<li><strong>Aggregation</strong>: The API defines how the collected data should be aggregated. This could involve calculating averages, sums, or other statistical measures over a specific time window to provide a meaningful representation of the service's performance.</li>
<li><strong>Other Related Aspects</strong>: Beyond data collection and aggregation, the API likely handles other aspects such as data retention policies, thresholds for triggering scaling actions, and configurations for interacting with the autoscaler's decision-making process.</li>
</ol>
</li>
<li>Metrics are automatically generated from PodAutoscalers by default.</li>
</ul>
</li>
<li><strong>ServerlessServices</strong> (SKS):<!-- -->
<ul>
<li>API: <code>serverlessservices.networking.internal.knative.dev</code></li>
<li>It's an abstraction layer built on top of Kubernetes Services, managing the data flow and the switch between using the activator as a buffer or routing directly to application instances.</li>
<li>SKS creates two Kubernetes services for each revision: a public service and a private service.</li>
<li>The private service points to the application instances, while the public service endpoints are managed directly by the SKS reconciler.</li>
<li>SKS operates in two modes: Serve and Proxy.<!-- -->
<ol>
<li>In <strong>Serve mode</strong>, traffic flows directly to the revision's pods.</li>
<li>In <strong>Proxy mode</strong>, traffic is directed to activators.</li>
</ol>
</li>
<li>ServerlessServices are created from PodAutoscalers.</li>
</ul>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scaling-up-and-down-steady-state">Scaling up and down (steady state)<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#scaling-up-and-down-steady-state" class="hash-link" aria-label="Direct link to Scaling up and down (steady state)" title="Direct link to Scaling up and down (steady state)">​</a></h3>
<p><img loading="lazy" alt="steady state" src="https://wedaa.tech/docs/assets/images/04-steady-state-62cf2df517223eaaedf233840e41a74c.png" width="783" height="591" class="img_ev3q"></p>
<ul>
<li><strong>Steady State Operation</strong>:<!-- -->
<ul>
<li>The autoscaler operates continuously at a steady state.</li>
<li>It regularly scrapes data from the currently active revision pods to monitor their performance.</li>
</ul>
</li>
<li><strong>Dynamic Adjustment</strong>:<!-- -->
<ul>
<li>As incoming requests flow into the system, the scraped values of performance metrics change accordingly.</li>
<li>Based on these changing metrics, the autoscaler dynamically adjusts the scale of the revision.</li>
</ul>
</li>
<li><strong>SKS Functionality</strong>:<!-- -->
<ul>
<li>The ServerlessServices (SKS) component keeps track of changes to the deployment's size.</li>
<li>It achieves this by monitoring the private service associated with the deployment.</li>
</ul>
</li>
<li><strong>Public Service Update</strong>:<!-- -->
<ul>
<li>SKS updates the public service based on the changes detected in the deployment's size.</li>
<li>This ensures that the public service endpoints accurately reflect the available instances of the revision.</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scaling-to-zero">Scaling to zero<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#scaling-to-zero" class="hash-link" aria-label="Direct link to Scaling to zero" title="Direct link to Scaling to zero">​</a></h3>
<p><img loading="lazy" alt="Scaling to zero" src="https://wedaa.tech/docs/assets/images/05-scaling-to-zero-edbbc4a96b34af7d03439022eaf00ecc.png" width="811" height="500" class="img_ev3q"></p>
<ul>
<li><strong>Scaling to Zero Process</strong> (1):<!-- -->
<ul>
<li>A revision scales down to zero when there are no more requests in the system.</li>
<li>All data collected by the autoscaler from revision pods and the activator reports zero concurrency, indicating no active requests.</li>
</ul>
</li>
<li><strong>Activator Preparation</strong>:<!-- -->
<ul>
<li>Before removing the last pod of the revision, the system ensures that the activator is in the path and reachable.</li>
</ul>
</li>
<li><strong>Proxy Mode Activation</strong> (4.1):<!-- -->
<ul>
<li>The autoscaler, which initiated the decision to scale to zero, directs the SKS to switch to Proxy mode.</li>
<li>In Proxy mode, all incoming traffic is routed to the activators.</li>
</ul>
</li>
<li><strong>Public Service Probing</strong>:<!-- -->
<ul>
<li>The SKS's public service is probed continuously to ensure it returns responses from the activator.</li>
<li>Once the public service reliably returns responses from the activator and a configurable grace period (set via scale-to-zero-grace-period) has elapsed,</li>
</ul>
</li>
<li><strong>Final Scaling Down</strong> (5):<!-- -->
<ul>
<li>The last pod of the revision is removed, marking the successful scaling down of the revision to zero instances.</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scaling-from-zero">Scaling from zero<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#scaling-from-zero" class="hash-link" aria-label="Direct link to Scaling from zero" title="Direct link to Scaling from zero">​</a></h3>
<p><img loading="lazy" alt="Scaling from zero" src="https://wedaa.tech/docs/assets/images/06-scaling-from-zero-95be865fd7ac19f2617d836ffb91726b.png" width="770" height="527" class="img_ev3q"></p>
<ul>
<li><strong>Scaling Up Process</strong>:<!-- -->
<ul>
<li>If a revision is scaled to zero and a request arrives for it, the system needs to scale it up.</li>
<li>As the SKS is in Proxy mode, the request reaches the activator.</li>
</ul>
</li>
<li><strong>Request Handling</strong>:<!-- -->
<ul>
<li>The activator counts the incoming request and reports its appearance to the autoscaler (2.1).</li>
<li>It then buffers the request and monitors the SKS's private service for endpoints to appear (2.2).</li>
</ul>
</li>
<li><strong>Autoscaling Cycle</strong> (3):<!-- -->
<ul>
<li>The autoscaler receives the metric from the activator and initiates an autoscaling cycle.</li>
<li>This process determines the desired number of pods based on the incoming request.</li>
</ul>
</li>
<li><strong>Scaling Decision</strong> (4):<!-- -->
<ul>
<li>The autoscaling process concludes that at least one pod is needed to handle the incoming request.</li>
</ul>
</li>
<li><strong>Scaling Up Instructions</strong> (5.1):<!-- -->
<ul>
<li>The autoscaler instructs the revision's deployment to scale up to N &gt; 0 replicas to accommodate the increased demand.</li>
</ul>
</li>
<li><strong>Serve Mode Activation</strong> (5.2):<!-- -->
<ul>
<li>The autoscaler switches the SKS into Serve mode, directing traffic to the revision's pods directly once they are up.</li>
</ul>
</li>
<li><strong>Endpoint Probing</strong>:<!-- -->
<ul>
<li>The activator monitors the SKS's private service for the appearance of endpoints.</li>
<li>Once the endpoints come up and pass the probe successfully, the respective address is considered healthy and used to route the buffered request and any additional requests that arrived in the meantime (8.2).</li>
</ul>
</li>
<li><strong>Successful Scaling Up</strong>:<!-- -->
<ul>
<li>The revision has successfully scaled up from zero to handle the incoming request.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://wedaa.tech/docs/blog/2024/05/01/knative-serving-01#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In summary, we've explored the core concepts of Knative Serving, from its architecture to scaling mechanisms. Next, we'll dive into practical implementation in our upcoming blog. Also, stay tuned for the integration of the serverless component into the <a href="https://app.wedaa.tech/" target="_blank" rel="noopener noreferrer">WeDAA</a> Platform, making prototyping and deployment faster and easier than ever.</p>]]></content>
        <category label="microservices" term="microservices"/>
        <category label="architecture" term="architecture"/>
        <category label="cloud-native" term="cloud-native"/>
        <category label="Serverless" term="Serverless"/>
        <category label="cloud computing" term="cloud computing"/>
        <category label="knative" term="knative"/>
        <category label="kubernetes" term="kubernetes"/>
        <category label="Knative-serving" term="Knative-serving"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Revolutionizing Software Development with React Flow]]></title>
        <id>https://wedaa.tech/docs/blog/2024/04/25/react-flow</id>
        <link href="https://wedaa.tech/docs/blog/2024/04/25/react-flow"/>
        <updated>2024-04-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Revolutionizing Software Development with React Flow]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="react-and-react-flow">React and React Flow<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#react-and-react-flow" class="hash-link" aria-label="Direct link to React and React Flow" title="Direct link to React and React Flow">​</a></h2>
<p><img loading="lazy" alt="React Flow" src="https://wedaa.tech/docs/assets/images/reactflow-1-0b2c1fc0d5f457b5ed672d1adada94f7.png" width="1792" height="1024" class="img_ev3q"></p>
<p>React is a popular JavaScript library used for building user interfaces. It allows developers to build reusable components that can be combined to create complex UIs with ease. React Flow is a library built on top of React that provides a set of components for building interactive node-based UIs, such as flowcharts, diagrams, and graphs. In this blog, we will discuss why we used React Flow, its main functions, and what makes it unique.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-react-flow">Why React Flow?<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#why-react-flow" class="hash-link" aria-label="Direct link to Why React Flow?" title="Direct link to Why React Flow?">​</a></h2>
<p>React Flow provides a simple way to create interactive node-based UIs. It's built on top of React, which means that it integrates seamlessly with other React components and libraries. Additionally, React Flow is highly customizable, allowing developers to create unique visuals and behaviors for their flowcharts, diagrams, and graphs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="main-functions-of-react-flow">Main Functions of React Flow<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#main-functions-of-react-flow" class="hash-link" aria-label="Direct link to Main Functions of React Flow" title="Direct link to Main Functions of React Flow">​</a></h2>
<p>React Flow provides a set of core components that can be combined to create powerful and complex node-based UIs. Some of the main functions include:</p>
<ul>
<li>Drag and drop nodes</li>
<li>Connect nodes with edges</li>
<li>Customizable node appearance and behavior</li>
<li>Zoom and pan</li>
<li>Multiple selection</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-makes-react-flow-unique">What Makes React Flow Unique?<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#what-makes-react-flow-unique" class="hash-link" aria-label="Direct link to What Makes React Flow Unique?" title="Direct link to What Makes React Flow Unique?">​</a></h2>
<p>React Flow stands out among other libraries for building node-based graphs and diagrams for several reasons:
<img loading="lazy" alt="What Makes React Flow Unique" src="https://wedaa.tech/docs/assets/images/reactflow-2-b91f0c168740a92de68a46c7389b4b10.png" width="1200" height="630" class="img_ev3q"></p>
<ol>
<li>
<p><strong>React Integration</strong>: As the name suggests, React Flow is specifically designed for integration with React applications. It leverages React's component-based architecture and state management, making it easy for React developers to incorporate complex graph visualization into their projects seamlessly.</p>
</li>
<li>
<p><strong>Customizability</strong>: React Flow offers a high degree of customizability, allowing developers to style and configure every aspect of the graph components to suit their application's needs. This includes customization of node appearance, edge styles, interaction behaviors, and more.</p>
</li>
<li>
<p><strong>Performance</strong>: React Flow is optimized for performance, ensuring smooth interactions and efficient rendering even with large graphs containing hundreds or thousands of nodes and edges. It achieves this by employing various optimization techniques such as virtualization and smart rendering.</p>
</li>
<li>
<p><strong>Community and Support</strong>: React Flow has a growing community of users and contributors who actively maintain the library, provide support, and contribute new features and improvements. This means that developers can rely on a robust ecosystem of resources and assistance when working with React Flow in their projects.</p>
</li>
<li>
<p><strong>Rich Feature Set</strong>: React Flow offers a rich feature set out of the box, including support for features like drag-and-drop node placement, automatic layout algorithms, zooming and panning, undo/redo functionality, and more. These features make it suitable for a wide range of graph visualization use cases.</p>
</li>
<li>
<p><strong>Active Development</strong>: The React Flow library is actively developed and updated, meaning that it stays up-to-date with the latest developments in the React ecosystem and continues to receive new features, optimizations, and bug fixes over time.</p>
</li>
</ol>
<p>Overall, React Flow's combination of React integration, customizability, performance, community support, rich feature set, and active development make it a standout choice for developers looking to incorporate node-based graph visualization into their React applications.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="installation-of-react-flow">Installation of React Flow<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#installation-of-react-flow" class="hash-link" aria-label="Direct link to Installation of React Flow" title="Direct link to Installation of React Flow">​</a></h2>
<p>Prerequisites:</p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Node.js</a></li>
<li><a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noopener noreferrer">npm</a> or another package manager like&nbsp;<a href="https://yarnpkg.com/" target="_blank" rel="noopener noreferrer">yarn</a>&nbsp;or&nbsp;<a href="https://pnpm.io/" target="_blank" rel="noopener noreferrer">pnpm</a>.</li>
<li>A basic knowledge of&nbsp;<a href="https://reactjs.org/" target="_blank" rel="noopener noreferrer">React</a>.</li>
</ul>
<p>To get started with React Flow, you first need to install it using npm or yarn. You can do this by running:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm install react-flow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>or</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">yarn add react-flow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once you've installed React Flow, you can import the core components and start building your node-based UI.</p>
<p>Here's an example of how to create a simple flowchart using React Flow:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"react"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">ReactFlow</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"reactflow"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"reactflow/dist/style.css"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> initialNodes </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">position</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">x</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">y</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">label</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">position</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">x</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">y</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">100</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">label</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> initialEdges </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"e1-2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">source</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">target</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">App</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">width</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"100vw"</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">height</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"100vh"</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">ReactFlow</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">nodes</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">initialNodes</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">edges</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">initialEdges</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example, we're importing React and ReactFlow, defining an array of elements that represent our nodes and edges, and rendering a <code>&lt;ReactFlow&gt;</code> component with our elements as props.</p>
<p>The&nbsp;<code>&lt;ReactFlow /&gt;</code>&nbsp;component must be wrapped in an element with a width and height.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-dive-into-react-flow">Want to dive into React Flow?<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#want-to-dive-into-react-flow" class="hash-link" aria-label="Direct link to Want to dive into React Flow?" title="Direct link to Want to dive into React Flow?">​</a></h2>
<p>The above example provides a basic introduction to creating flowcharts with React Flow. However, React Flow offers many more features and customization options, including drag-and-drop functionality, automatic layout algorithms, zooming, and undo/redo functionality.</p>
<p>To explore these features further and learn how to customize your flowcharts, check out the React Flow documentation and examples.</p>
<p>Here's a link to learn more about React Flow: <a href="https://reactflow.dev/" target="_blank" rel="noopener noreferrer">React Flow</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="leveraging-react-flow-in-wedaa">Leveraging React Flow in WeDAA<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#leveraging-react-flow-in-wedaa" class="hash-link" aria-label="Direct link to Leveraging React Flow in WeDAA" title="Direct link to Leveraging React Flow in WeDAA">​</a></h2>
<p>At WeDAA, our platform is dedicated to empowering developers to prototype microservices efficiently. One key component of our platform is the ability to create well-defined architectures seamlessly. To achieve this, we turned to React Flow, a versatile library that enables the creation of interactive node-based user interfaces, such as flowcharts. Let's delve into why React Flow became an integral part of our architecture design process and the challenges we encountered along the way.</p>
<p>At the core of WeDAA's mission is the desire to provide developers with intuitive tools to design microservice architectures effortlessly. React Flow emerged as the perfect solution due to its ability to facilitate the creation of dynamic, node-based UIs. With React Flow, users can visually construct their architecture diagrams directly within our platform. This interactive approach not only enhances the user experience but also streamlines the process of translating these diagrams into well-defined code structures.</p>
<p>By leveraging React Flow, WeDAA offers users a <a href="https://app.wedaa.tech/canvastocode" target="_blank" rel="noopener noreferrer">visual canvas</a> where they can intuitively design their architecture using nodes and connectors. This eliminates the need for traditional input forms and empowers users to express their architectural ideas in a more tangible and engaging manner.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overcoming-challenges-with-react-flow">Overcoming Challenges with React Flow<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#overcoming-challenges-with-react-flow" class="hash-link" aria-label="Direct link to Overcoming Challenges with React Flow" title="Direct link to Overcoming Challenges with React Flow">​</a></h2>
<p>While integrating React Flow into WeDAA presented numerous benefits, it also came with its set of challenges. One significant challenge was ensuring seamless communication between the visual representation of the architecture in React Flow and the backend engine responsible for generating code based on the provided JSON.</p>
<p>To address this challenge, our team worked diligently to establish robust data exchange mechanisms. We developed efficient processes to capture the architecture drawn by users using React Flow and transform it into a structured JSON format. This JSON data is then seamlessly passed to the WeDAA backend engine, where it undergoes further processing to generate the corresponding code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="empowering-architecture-design-with-interactivity">Empowering Architecture Design with Interactivity<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#empowering-architecture-design-with-interactivity" class="hash-link" aria-label="Direct link to Empowering Architecture Design with Interactivity" title="Direct link to Empowering Architecture Design with Interactivity">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="custom-nodes">Custom Nodes<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#custom-nodes" class="hash-link" aria-label="Direct link to Custom Nodes" title="Direct link to Custom Nodes">​</a></h3>
<p>A powerful feature of React Flow is the ability to add custom nodes. Within your custom nodes you can render everything you want.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="creating-custom-nodes">Creating Custom Nodes<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#creating-custom-nodes" class="hash-link" aria-label="Direct link to Creating Custom Nodes" title="Direct link to Creating Custom Nodes">​</a></h4>
<p>To create a custom node, you can leverage the newNode object structure as follows:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> newNode </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//unique ID you want to provide</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">type</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//type of the node we want to use for this specific node,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    position</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">label</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"label you want to display for that specific node"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">style</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//style changes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the type field, specify the custom node type you wish to utilize. This approach allows for the creation of nodes with diverse functionalities, enhancing the visual representation of data and interactions.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="combining-node-functionality">Combining Node Functionality<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#combining-node-functionality" class="hash-link" aria-label="Direct link to Combining Node Functionality" title="Direct link to Combining Node Functionality">​</a></h4>
<p>React Flow also supports combining multiple functionalities into a single custom node. For instance, if you want a node to display an image and provide resizing options, you can achieve this by creating a custom node file and incorporating <code>&lt;NodeResizer&gt;</code> alongside your content:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">NodeResizer</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">minWidth</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript number" style="color:rgb(247, 140, 108)">60</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">minHeight</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript number" style="color:rgb(247, 140, 108)">60</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">img</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">width</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">60px</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">src</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">image</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">alt</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">img</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">   </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This approach seamlessly integrates diverse features into a cohesive node representation, offering a comprehensive solution for complex UI requirements.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h4>
<p>The image below showcases a custom node used within a React Flow application. This custom node demonstrates the potential for creating visually rich and interactive elements within the flow diagram.</p>
<p><img loading="lazy" alt="CustomNode Image of React" src="https://wedaa.tech/docs/assets/images/custom-node-262bb921a0a99c520a88a31ee30e5c5e.png" width="1850" height="961" class="img_ev3q"></p>
<p>By leveraging custom nodes in React Flow, developers can unlock a world of possibilities for creating dynamic and engaging user interfaces.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-handles-to-all-sides-of-a-node">Adding Handles to All Sides of a Node<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#adding-handles-to-all-sides-of-a-node" class="hash-link" aria-label="Direct link to Adding Handles to All Sides of a Node" title="Direct link to Adding Handles to All Sides of a Node">​</a></h3>
<p>To enable edges to connect to any side of a node, serving as both the source and the target, we can add handles to all sides of the node. This functionality enhances the flexibility and interactivity of our flow diagrams.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="implementation">Implementation<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#implementation" class="hash-link" aria-label="Direct link to Implementation" title="Direct link to Implementation">​</a></h4>
<p>First, let's add handles to each side (Top, Left, Bottom, Right) of the node:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">NodeResizer</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">nodeId</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">data</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">minWidth</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript number" style="color:rgb(247, 140, 108)">100</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">minHeight</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript number" style="color:rgb(247, 140, 108)">30</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">label</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source.Right</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Right</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">sourceStyle</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source.Bottom</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Bottom</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">sourceStyle</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source.Top</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Top</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">sourceStyle</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source.Left</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Left</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">source</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">sourceStyle</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Left</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target.Left</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Top</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target.Top</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Bottom</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target.Bottom</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Handle</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">position</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript maybe-class-name" style="color:rgb(255, 85, 114)">Position</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access maybe-class-name" style="color:rgb(255, 85, 114)">Right</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target.Right</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">target</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, let's handle the connection logic based on the connectionNodeId in the application's state:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">connectionNodeIdSelector</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">connectionNodeId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">CustomNode</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> id</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> data</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> selected </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> connectionNodeId </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useStore</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">connectionNodeIdSelector</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> isConnecting </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">connectionNodeId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> sourceStyle </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">zIndex</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">isConnecting </span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">			</span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Node component content</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The component confidently retrieves the <code>connectionNodeId</code> from the application's state using the <code>useStore</code> hook. It then sets <code>isConnecting</code> to <code>true</code> if <code>connectionNodeId</code> is truthy. Additionally, the <code>zIndex</code> of the <code>sourceStyle</code> object is set to <code>1</code> if <code>isConnecting</code> is false, or <code>0</code> if <code>isConnecting</code> is true.</p>
<p>This approach ensures that whenever a node acts as a source, all the other nodes change their behavior as the target node and vice versa. The desired outcome is achieved through the use of zIndex.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example-1">Example<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#example-1" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h4>
<p>The image below illustrates a custom node with handles on all sides:</p>
<p><img loading="lazy" alt="customNode Handles" src="https://wedaa.tech/docs/assets/images/node-handles-a4aaa1cc656f5a4ba1aceafca3b57169.png" width="1850" height="961" class="img_ev3q"></p>
<p>This setup enables seamless edge connections from any side of the node, enhancing the versatility and usability of the React Flow diagrams.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="deleting-a-node-or-a-edge">Deleting a node or a edge<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#deleting-a-node-or-a-edge" class="hash-link" aria-label="Direct link to Deleting a node or a edge" title="Direct link to Deleting a node or a edge">​</a></h3>
<p>To enhance node and edge deletion functionality in a React Flow application, React Flow offers a default deletion function triggered by the Backspace key on the keyboard. However, if the requirement is to extend this functionality to include the Delete key as well, the process can be accomplished by utilizing the <strong><code>deleteKeyCode</code></strong> property and adding the corresponding key codes for the Delete key.</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">ReactFlow</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">deleteKeyCode</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"Backspace"</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"Delete"</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">ReactFlow</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-color-options-to-nodes">Adding Color Options to Nodes<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#adding-color-options-to-nodes" class="hash-link" aria-label="Direct link to Adding Color Options to Nodes" title="Direct link to Adding Color Options to Nodes">​</a></h3>
<p>While React Flow doesn't have a direct method for setting specific background colors for nodes, we can achieve this functionality by defining a function to handle color changes and incorporating color options into our node components.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="color-change-function">Color Change Function<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#color-change-function" class="hash-link" aria-label="Direct link to Color Change Function" title="Direct link to Color Change Function">​</a></h4>
<p>Let's start by defining the handleColorClick function, which will be responsible for changing the background color of a node:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">handleColorClick</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">color</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> </span><span class="token maybe-class-name">UpdatedNodes</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">nodes </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">setSelectedColor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">color</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token maybe-class-name">UpdatedNodes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">nodeClick</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">style</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">??=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">backgroundColor</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> color</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">setNodes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token maybe-class-name">UpdatedNodes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is a code defines a function called <code>handleColorClick</code>. The function takes a single argument, <code>color</code>, which is a string representing the color to set as the background color of a node.</p>
<p>The function first creates a copy of the <code>nodes</code> object using the spread operator, so that the original object is not modified directly. It then sets the <code>selectedColor</code> state variable to the provided <code>color</code>. Finally, it sets the <code>backgroundColor</code> property of the node with the ID specified by <code>nodeClick</code> to the provided <code>color</code>. If the <code>style</code> property does not exist for that node, it will be created and set to an empty object before the <code>backgroundColor</code> property is added to it. The nullish coalescing operator (<code>??=</code>) ensures that the <code>style</code> property is set to an object if it does not already exist.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="adding-color-options">Adding Color Options<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#adding-color-options" class="hash-link" aria-label="Direct link to Adding Color Options" title="Direct link to Adding Color Options">​</a></h4>
<p>Next, let's add color options to our node component and link them to the handleColorClick function:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">  </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">      </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">width</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"30px"</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">      </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">height</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"30px"</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">      </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">borderRadius</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"50%"</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">      </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">backgroundColor</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript comment" style="color:rgb(105, 112, 152);font-style:italic">//desiredColor,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">      </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">cursor</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript string" style="color:rgb(195, 232, 141)">"pointer"</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">  </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">  </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">handleColorClick</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag comment" style="color:rgb(105, 112, 152);font-style:italic">//desiredColor</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example-2">Example<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#example-2" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h4>
<p>The animation below demonstrates changing the color of a node:</p>
<video controls="" width="740" height="420"><source src="/docs/videos/node-color.mp4" type="video/mp4"></video>
<p>By implementing color options and the color change function, you can customize the appearance of nodes in your React Flow diagrams to match your design preferences or convey specific information.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-backgroup-grid-to-canvas">Adding Backgroup Grid to Canvas<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#adding-backgroup-grid-to-canvas" class="hash-link" aria-label="Direct link to Adding Backgroup Grid to Canvas" title="Direct link to Adding Backgroup Grid to Canvas">​</a></h3>
<p>In React Flow, the ability to add a background grid to the canvas provides a valuable tool for maintaining precise alignment and enhancing the aesthetics of your flowchart. Whether you're crafting a complex diagram or a simple layout, the grid system ensures that nodes and elements align perfectly, contributing to a well-organized and visually appealing flow chart.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="implementation-1">Implementation<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#implementation-1" class="hash-link" aria-label="Direct link to Implementation" title="Direct link to Implementation">​</a></h4>
<p>To add a background grid to your React Flow canvas, you can use the <code>&lt;Background&gt;</code> component with specific configurations. Here's an example of how to implement it:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">ReactFlow</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Background</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">    </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">gap</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag comment" style="color:rgb(105, 112, 152);font-style:italic">//desired gap between patterns</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">    </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">color</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag comment" style="color:rgb(105, 112, 152);font-style:italic">//desired color for grid</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">    </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">variant</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag comment" style="color:rgb(105, 112, 152);font-style:italic">//declaring the type of variant we want to use for grid(line/grid/dots)</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">ReactFlow</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this code snippet, we set the gap prop to define the gap between grid patterns, the color prop to specify the color of the grid, and the variant prop to determine the type of grid variant (lines, grid, dots).</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example-3">Example<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#example-3" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h4>
<p>The image below showcases a custom node with a background grid applied to the canvas:</p>
<p><img loading="lazy" alt="customNode Background" src="https://wedaa.tech/docs/assets/images/background-3b9c356636f0575af9a8cc3e9bfcd3f5.png" width="1847" height="966" class="img_ev3q"></p>
<p>By incorporating a background grid, you can ensure precise alignment and enhance the overall visual appeal of your flowchart or diagram in React Flow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="saving-node-positions-and-dimensions">Saving Node Positions and Dimensions<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#saving-node-positions-and-dimensions" class="hash-link" aria-label="Direct link to Saving Node Positions and Dimensions" title="Direct link to Saving Node Positions and Dimensions">​</a></h3>
<p>In React Flow, the onNodesChange function plays a crucial role in handling changes to nodes within the flow. It's often called in response to user actions like dragging nodes, selecting nodes, or removing nodes.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="implementing-onnodeschange">Implementing onNodesChange<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#implementing-onnodeschange" class="hash-link" aria-label="Direct link to Implementing onNodesChange" title="Direct link to Implementing onNodesChange">​</a></h4>
<p>First, let's set up onNodesChange in our React Flow component:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">ReactFlow</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">  </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onNodesChange</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">    </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 85, 114)">changes</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">onNodesChange</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript comment" style="color:rgb(105, 112, 152);font-style:italic">//desiredArguments, changes</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">  </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">ReactFlow</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The onNodesChange callback receives a list of changes when nodes are modified in the flow. We pass these changes to our onNodesChange function to handle updates.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="handling-position-and-dimension-changes">Handling Position and Dimension Changes<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#handling-position-and-dimension-changes" class="hash-link" aria-label="Direct link to Handling Position and Dimension Changes" title="Direct link to Handling Position and Dimension Changes">​</a></h4>
<p>Inside onNodesChange, we can handle position and dimension changes using a switch case:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> onNodesChange </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useCallback</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/*desiredArguments*/</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> changes </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> updatedNodes </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">nodes </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  changes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">forEach</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">type</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"dimensions"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">resizing</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          updatedNodes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">updatedNodes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token literal-property property">position</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">              </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">updatedNodes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">position</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token literal-property property">style</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">              </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">updatedNodes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">style</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">              </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">dimensions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">break</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"position"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Add logic for handling position changes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">break</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"select"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Add logic for handling node selection</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">break</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"remove"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Add logic for handling node removal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">break</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Handle other cases as needed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example, we focus on handling dimension changes (change.type === "dimensions") by updating the node's dimensions and style accordingly. You can similarly add logic for position changes (change.type === "position") or other types of changes as required.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="example-4">Example<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#example-4" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h4>
<p>The animation below demonstrates saving node positions and dimensions after submitting:</p>
<video controls="" width="740" height="420"><source src="/docs/videos/node-dimension-change.mp4" type="video/mp4"></video>
<p>By leveraging onNodesChange and handling different change types effectively, we ensure that node positions and dimensions are updated and saved seamlessly within the React Flow environment.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="handling-edge-changes-with-onedgeschange">Handling Edge Changes with onEdgesChange<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#handling-edge-changes-with-onedgeschange" class="hash-link" aria-label="Direct link to Handling Edge Changes with onEdgesChange" title="Direct link to Handling Edge Changes with onEdgesChange">​</a></h3>
<p>In addition to managing node changes, React Flow provides the onEdgesChange callback to handle modifications to edges within the flow. This includes actions like adding or removing edges, which are essential for creating a controlled and interactive flow diagram.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="implementing-onedgeschange">Implementing onEdgesChange<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#implementing-onedgeschange" class="hash-link" aria-label="Direct link to Implementing onEdgesChange" title="Direct link to Implementing onEdgesChange">​</a></h4>
<p>Let's integrate onEdgesChange into our React Flow component:</p>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> onEdgesChange </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useCallback</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">nodes</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> changes </span><span class="token parameter operator" style="color:rgb(137, 221, 255)">=</span><span class="token parameter"> </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  changes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">forEach</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">change</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">type</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"add"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Handle edge addition</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">break</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"remove"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Handle edge removal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">break</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Add other cases as needed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword module" style="font-style:italic">default</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">break</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The onEdgesChange function receives a list of changes when edges are modified in the flow. We can use a switch case to handle different types of changes, such as adding or removing edges.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://wedaa.tech/docs/blog/2024/04/25/react-flow#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In conclusion, React Flow has played a pivotal role in revolutionizing architecture design within the WeDAA platform. By empowering users to visually construct their architectures using intuitive node-based interfaces, React Flow has enhanced the efficiency and creativity of our users' workflow. Despite the challenges encountered along the way, the integration of React Flow has proven to be a valuable asset in achieving our goal of simplifying microservice prototyping.</p>
<p>Experience Our Visual canvas built using React Flow: <a href="https://app.wedaa.tech/canvastocode" target="_blank" rel="noopener noreferrer">WeDAA Canvas</a></p>]]></content>
        <category label="react" term="react"/>
        <category label="reactflow" term="reactflow"/>
        <category label="bestpractices" term="bestpractices"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unveiling the Power of Feature Flags in Software Development]]></title>
        <id>https://wedaa.tech/docs/blog/2024/04/18/feature-flags</id>
        <link href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags"/>
        <updated>2024-04-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Unveiling the Power of Feature Flags in Software Development]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>In the realm of software development, there is often a need for implementing features dynamically, toggling functionalities, and rolling out changes seamlessly without disrupting user experience. Imagine this scenario: you're working on a high-stakes project, and you need to introduce a new feature. However, releasing it to all users at once might be risky. What if there are bugs? What if users don't like it? This is where feature flags come to the rescue.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-tale-of-dynamic-feature-rollouts">The Tale of Dynamic Feature Rollouts<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#the-tale-of-dynamic-feature-rollouts" class="hash-link" aria-label="Direct link to The Tale of Dynamic Feature Rollouts" title="Direct link to The Tale of Dynamic Feature Rollouts">​</a></h3>
<p>Let's delve into a hypothetical scenario. Meet Adam, a software engineer working on a cutting-edge e-commerce platform. Their team is gearing up to introduce a new payment gateway, which promises to enhance user experience and reduces failure rates. However, they're wary of unforeseen bugs that might surface during the rollout. Plus, they're unsure if the new checkout flow will resonate well with all users.</p>
<p>Here's where feature flags come into play. By leveraging feature flags, Adam and their team can deploy the new payment gateway to a small subset of users initially. They can monitor its performance, gather feedback, and make necessary tweaks without affecting the entire user base. Once they're confident in the feature's stability and user acceptance, they can gradually roll it out to all users, mitigating risks and ensuring a smooth transition.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-feature-flags">Understanding Feature Flags<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#understanding-feature-flags" class="hash-link" aria-label="Direct link to Understanding Feature Flags" title="Direct link to Understanding Feature Flags">​</a></h3>
<p>Feature flags, also known as feature toggles or feature switches, are a powerful technique used in software development to enable or disable certain features at runtime. They provide developers with fine-grained control over feature rollout, allowing them to manage feature releases, perform A/B testing, and mitigate risks associated with deploying new functionalities.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hands-on">Hands-on<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#hands-on" class="hash-link" aria-label="Direct link to Hands-on" title="Direct link to Hands-on">​</a></h2>
<p>In this blog, we'll explore how to implement feature flags using the Flagsmith in a Go application built on the Go-Micro framework.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="generate-prototype-from-wedaa">Generate prototype from WeDAA<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#generate-prototype-from-wedaa" class="hash-link" aria-label="Direct link to Generate prototype from WeDAA" title="Direct link to Generate prototype from WeDAA">​</a></h3>
<p>Use below Architecture as reference and generate code from <a href="https://app.wedaa.tech/canvastocode" target="_blank" rel="noopener noreferrer">WeDAA</a></p>
<p><img loading="lazy" alt="A Go Micro Service" src="https://wedaa.tech/docs/assets/images/prototype-2838fe90122ecf5f6c8379cd413e7fa8.png" width="2996" height="1704" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setup-flagsmith">Setup Flagsmith<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#setup-flagsmith" class="hash-link" aria-label="Direct link to Setup Flagsmith" title="Direct link to Setup Flagsmith">​</a></h3>
<p><a href="https://www.flagsmith.com/" target="_blank" rel="noopener noreferrer">Flagsmith</a> is a feature flag tool that lets you manage features across web, mobile and server side applications.</p>
<p>It provides free account as well for SaaS offering. Signup, Create Organisation and add a feature flag.</p>
<p><img loading="lazy" alt="Flagsmith setup" src="https://wedaa.tech/docs/assets/images/flagsmith-2e961484e02318cd528c48db1873efdd.png" width="2968" height="1486" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flagsmith-sdk">Flagsmith SDK<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#flagsmith-sdk" class="hash-link" aria-label="Direct link to Flagsmith SDK" title="Direct link to Flagsmith SDK">​</a></h3>
<p>Include flagsmith SDK in <strong>go.mod</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">github.com/Flagsmith/flagsmith-go-client/v3 v3.4.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="payment-handler">Payment Handler<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#payment-handler" class="hash-link" aria-label="Direct link to Payment Handler" title="Direct link to Payment Handler">​</a></h3>
<p>In this snippet, we initialize the Flagsmith client with our API key, retrieve the status of a feature flag, and conditionally execute feature-specific functionality based on the flag's status.</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// src/handlers/payments.go</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">package</span><span class="token plain"> handler</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token string" style="color:rgb(195, 232, 141)">"context"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token string" style="color:rgb(195, 232, 141)">"net/http"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	flagsmith </span><span class="token string" style="color:rgb(195, 232, 141)">"github.com/Flagsmith/flagsmith-go-client/v3"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> PaymentsHandler </span><span class="token keyword" style="font-style:italic">struct</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">func</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">handler </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain">PaymentsHandler</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">ProcessPayment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">response http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">ResponseWriter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> request </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">Request</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	client </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> flagsmith</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">NewClient</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;YOUR_FLAGSMITH_API_KEY&gt;"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	flags</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">_</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> client</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">GetEnvironmentFlags</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">TODO</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	isEnabled</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">_</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> flags</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">IsFeatureEnabled</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"payment_gateway"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> isEnabled </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Write</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token function" style="color:rgb(130, 170, 255)">byte</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">`{ "message": "New Payment Gateway" }`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Write</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token function" style="color:rgb(130, 170, 255)">byte</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">`{ "message": "Old Payment Gateway" }`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="payment-controller">Payment Controller<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#payment-controller" class="hash-link" aria-label="Direct link to Payment Controller" title="Direct link to Payment Controller">​</a></h3>
<p>A sample controller with API to simulate payments.</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// src/controllers/payments.go</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">package</span><span class="token plain"> controllers</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token string" style="color:rgb(195, 232, 141)">"github.com/gorilla/mux"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token string" style="color:rgb(195, 232, 141)">"net/http"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token string" style="color:rgb(195, 232, 141)">"payments/handlers"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">var</span><span class="token plain"> paymentsHandler </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain">handler</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">PaymentsHandler</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> PaymentsController </span><span class="token keyword" style="font-style:italic">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">func</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">paymentsController PaymentsController</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">RegisterRoutes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">r </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain">mux</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">Router</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	r</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Handle</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"/api/payments"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">HandlerFunc</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">paymentsHandler</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">ProcessPayment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Methods</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">MethodGet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain">http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">MethodOptions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="register-payments-controller">Register Payments Controller<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#register-payments-controller" class="hash-link" aria-label="Direct link to Register Payments Controller" title="Direct link to Register Payments Controller">​</a></h3>
<p>Add the following code in registerRoutes function of <strong>main.go</strong> in src</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">func</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">registerRoutes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">router </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain">mux</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">Router</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">registerControllerRoutes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">controllers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">ManagementController</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> router</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">registerControllerRoutes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">controllers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">PaymentsController</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> router</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Register Payments Controller</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="execution">Execution<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#execution" class="hash-link" aria-label="Direct link to Execution" title="Direct link to Execution">​</a></h3>
<ol>
<li>
<p>Run the Go Micro Service using following commands</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">go mod tidy</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">go run .</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Check health of the service</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl -i -H "Accept: application/json" http://localhost:6060/management/health/readiness</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Response should be as follows</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">HTTP/1.1 200 OK</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Access-Control-Allow-Headers: Origin, Content-Type, Accept,Authorization</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Access-Control-Allow-Origin: *</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Content-Type: application/json</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Date: Wed, 17 Apr 2024 19:30:53 GMT</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Content-Length: 64</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">{"components":{"readinessState":{"status":"UP"}},"status":"UP"}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Test the new Payment API</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl -i -H "Accept: application/json" http://localhost:6060/api/payments</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Response will be based on feature flag, whether new or old payment gateway is used.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">HTTP/1.1 200 OK</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Access-Control-Allow-Headers: Origin, Content-Type, Accept,Authorization</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Access-Control-Allow-Origin: *</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Content-Type: application/json</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Date: Wed, 17 Apr 2024 19:33:33 GMT</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">Content-Length: 36</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">{ "message": "New Payment Gateway" }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://wedaa.tech/docs/blog/2024/04/18/feature-flags#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Feature flags revolutionize the way software is developed and released. They empower developers to iterate quickly, gather feedback, and deliver value to users with confidence. By adopting feature flags in your development workflow, you can mitigate risks, improve deployment agility, and ultimately, delight your users with timely and impactful features.</p>]]></content>
        <category label="featureflags" term="featureflags"/>
        <category label="architecture" term="architecture"/>
        <category label="bestpractices" term="bestpractices"/>
        <category label="flagsmith" term="flagsmith"/>
        <category label="go" term="go"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Microservice architecture using GoMicro]]></title>
        <id>https://wedaa.tech/docs/blog/2024/04/17/Go-Micro</id>
        <link href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro"/>
        <updated>2024-04-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Building Microservices architecture using GoMicro]]></summary>
        <content type="html"><![CDATA[<p>In today's scenario, we are seeing a shift from the monolithic landscape to microservice landscape. In simple words it can be termed as breaking a complex problem into smaller parts and making it easier to manage and develop. In Go to make this easier there is a framework GO MICRO - a helpful framework for building microservice applications with the Go programming language.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-microservice-architecture">Why Microservice Architecture<a href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro#why-microservice-architecture" class="hash-link" aria-label="Direct link to Why Microservice Architecture" title="Direct link to Why Microservice Architecture">​</a></h3>
<p>Imagine a library where all the books used to be stacked in one massive room. It would be chaotic trying to find the book you needed among the towering shelves. But now, picture this library transformed into a series of smaller rooms, each dedicated to a specific genre—mystery, romance, science fiction, and so on. Each room is organized neatly, making it easier for readers to find the books they're looking for without getting lost in the sea of literature. This is similar to how microservices work in software—they break down complex applications into smaller, specialized components, making it simpler for developers to manage and maintain the software.</p>
<p>Now how do we build them??</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="meet-gomicro---a-framework-for-distributed-systems-development">Meet GOMICRO - A framework for distributed systems development<a href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro#meet-gomicro---a-framework-for-distributed-systems-development" class="hash-link" aria-label="Direct link to Meet GOMICRO - A framework for distributed systems development" title="Direct link to Meet GOMICRO - A framework for distributed systems development">​</a></h2>
<p>In the world of microservices, Go Micro is like your trusty sidekick. It helps developers build and manage microservices without all the headaches of doing it from scratch. Think of it as a toolbox full of handy tools to make building microservices easier and faster.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-go-micro-helps-us">How Go Micro helps us??<a href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro#how-go-micro-helps-us" class="hash-link" aria-label="Direct link to How Go Micro helps us??" title="Direct link to How Go Micro helps us??">​</a></h3>
<ul>
<li>
<p><strong>Authentication and Authorization</strong> - Security is paramount in any architecture.Gomicro provide authorization.It seamlessly integrates with authentication providers like Keycloak, serving as a middleware to authenticate incoming requests.</p>
</li>
<li>
<p><strong>Service Discovery</strong> - Effective communication among microservices necessitates a reliable service discovery mechanism. Go Micro simplifies this with built-in support for mdns (Multicast DNS) and offers integrable libraries (plugins) for popular options such as Eureka, Etcd, Consul, and NATS, among others.</p>
</li>
<li>
<p><strong>Messaging</strong> - Messaging is an important aspect in the microservice architecture and event driven architectures. Go Micro eases the implementation of pub-sub models and other messaging paradigms with its plugin-based approach. Whether it's HTTP event message brokering or support for NATS, RabbitMQ, or Kafka, Go Micro has you covered.</p>
</li>
<li>
<p><strong>Protocols</strong> - Go Micro supports communication via HTTP and RPC (Remote Procedure Call), providing abstractions for synchronous communication. This flexibility enables developers to choose the most suitable communication protocol for their specific use cases.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tutorial">Tutorial<a href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro#tutorial" class="hash-link" aria-label="Direct link to Tutorial" title="Direct link to Tutorial">​</a></h2>
<ol>
<li>
<p><strong>Visit WeDAA</strong>: Go to <a href="https://app.wedaa.tech/canvastocode" target="_blank" rel="noopener noreferrer">WeDAA</a>.</p>
</li>
<li>
<p><strong>Choose GoMicro Application</strong>: Navigate to the service tab in the sidebar and select Go. Drag and drop it onto the canvas.</p>
</li>
<li>
<p><strong>Connect a Database and Add Authentication</strong>: Connect a database to the application. Additionally, add authentication to secure the  application. WeDAA supports Keycloak as an authentication IDP.</p>
</li>
</ol>
<p><img loading="lazy" alt="Sample GOMICRO WeDAA Architecture" src="https://wedaa.tech/docs/assets/images/go_micro_one-f2b63d82818c11bb0976bc6d9c85b011.png" width="1848" height="939" class="img_ev3q"></p>
<ol start="4">
<li><strong>Fill in Required Details</strong>: Provide necessary details for the service and database connection.</li>
</ol>
<p><img loading="lazy" alt="Sample GOMICRO WeDAA Architecture" src="https://wedaa.tech/docs/assets/images/go_micro_two-2a7096b9f917aa1abe769d5d513eaa1e.png" width="1843" height="938" class="img_ev3q"></p>
<ol start="5">
<li><strong>Validate and Review</strong>: Click on validate to review the setup. Ensure everything is configured correctly.</li>
</ol>
<p><img loading="lazy" alt="Sample GOMICRO WeDAA Architecture" src="https://wedaa.tech/docs/assets/images/go_micro_three-8da8e0e5ad804ee0b79f8b7d0372ebab.png" width="1847" height="939" class="img_ev3q"></p>
<ol start="6">
<li><strong>Cloud Service Setup (Optional)</strong>: Weeda has support for Azure, AWS and minikube.We can opt for one and fill in the necessary details to deploy applications in the specific cloud provider.we can skip this step for now by selecting none.</li>
</ol>
<p><img loading="lazy" alt="Sample GOMICRO WeDAA Architecture" src="https://wedaa.tech/docs/assets/images/go_micro_four-b8c2c9bb30e32b1137fccd8d67b48d42.png" width="1850" height="936" class="img_ev3q"></p>
<ol start="7">
<li><strong>Generate Project Zip</strong>: After submission, a zip file containing the project will be generated.</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="application-quickstart-guide">Application Quickstart Guide<a href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro#application-quickstart-guide" class="hash-link" aria-label="Direct link to Application Quickstart Guide" title="Direct link to Application Quickstart Guide">​</a></h3>
<ol>
<li>
<p><strong>Prerequisites</strong>: Ensure Docker is set up in advance if Keycloak is not configured as standalone or if PostgreSQL is not set up separately. Keycloak and PostgreSQL provided are Dockerized containers.</p>
</li>
<li>
<p><strong>Start Keycloak and PostgreSQL</strong>:</p>
</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">   docker compose -f docker/keycloak.yml up -d</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   docker compose -f docker/postgresql.yml up -d</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>
<p><strong>Start the Go Service</strong>: Once Keycloak and PostgreSQL services are up, start the Go service.</p>
</li>
<li>
<p><strong>Install Dependencies and Run the Service</strong>:</p>
</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">   go mod tidy</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   go run .</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This command will install any required dependencies and then run the Go service.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-the-code">Understanding the code<a href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro#understanding-the-code" class="hash-link" aria-label="Direct link to Understanding the code" title="Direct link to Understanding the code">​</a></h3>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">func</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">main</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	app</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Setconfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	migrate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">MigrateAndCreateDatabase</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">SetClient</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	config</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">InitializeDb</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	port </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain">app</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">GetVal</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"GO_MICRO_SERVICE_PORT"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	srv </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> micro</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">NewService</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		micro</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Server</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">mhttp</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">NewServer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	opts1 </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain">micro</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">Option</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		micro</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"backendone"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		micro</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Version</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"latest"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		micro</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Address</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">":"</span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain">port</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	srv</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Init</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">opts1</span><span class="token operator" style="color:rgb(137, 221, 255)">...</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	r </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> mux</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">NewRouter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">StrictSlash</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	r</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Use</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">corsMiddleware</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token function" style="color:rgb(130, 170, 255)">registerRoutes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">r</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain">		</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token keyword" style="font-style:italic">var</span><span class="token plain"> handlers http</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">Handler </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> r</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> err </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> micro</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">RegisterHandler</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">srv</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Server</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> handlers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> err </span><span class="token operator" style="color:rgb(137, 221, 255)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		logger</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Fatal</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">err</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> err </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> srv</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Run</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> err </span><span class="token operator" style="color:rgb(137, 221, 255)">!=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">		logger</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Fatal</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">err</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">	</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>
<p><strong>Config Initialization</strong> - The application begins by loading configuration values from externalized YAML files into the environment. This ensures that the application has access to the necessary configuration parameters.</p>
</li>
<li>
<p><strong>Database Migration</strong> - WeDAA supports migration for PostgreSQL databases. Using the go-migrate package library, a new database is created and data initialization is performed. This ensures that the database is properly set up and populated with initial data.</p>
</li>
<li>
<p><strong>Authentication Setup</strong> - The code proceeds by setting up the authentication client,here Keycloak is being used as the identity provider (IDP) for authentication. This involves establishing a connection to Keycloak.</p>
</li>
<li>
<p><strong>Microservice Setup</strong> - The micro.NewService function is a notation used by GoMicro to set up the microservice. Here, configurations are provided to the microservice via options. This step initializes the microservice and prepares it to handle incoming requests.</p>
</li>
<li>
<p><strong>Router Setup</strong> - The code utilizes the mux router to create a routing setup. This involves defining endpoints and their corresponding handlers. The router is then registered with GoMicro, indicating that the microservice should use this router to handle incoming requests.</p>
</li>
<li>
<p><strong>Application Execution</strong> - Finally, the application is run. This step starts the microservice, allowing it to listen for incoming requests and handle them according to the defined routing setup.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://wedaa.tech/docs/blog/2024/04/17/Go-Micro#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Go Micro leverages Go interfaces for each distributed system abstraction, rendering them pluggable and runtime-agnostic. This inherent flexibility allows developers to seamlessly integrate various underlying technologies, optimizing microservice development in a clean and efficient manner.</p>]]></content>
        <category label="go" term="go"/>
        <category label="microservices" term="microservices"/>
        <category label="prototyping" term="prototyping"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dive into Knative—Explore Serverless with Kubernetes]]></title>
        <id>https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative</id>
        <link href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative"/>
        <updated>2024-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Overview on Knative]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-serverless">What is serverless?<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#what-is-serverless" class="hash-link" aria-label="Direct link to What is serverless?" title="Direct link to What is serverless?">​</a></h2>
<p>Serverless is a cloud-native development model that allows developers to build and run applications without having to manage servers.</p>
<p>There are still servers in serverless, but they are abstracted away from app development. A cloud provider handles the routine work of provisioning, maintaining, and scaling the server infrastructure. Developers can simply package their code in containers for deployment.</p>
<p>Once deployed, serverless apps respond to demand and automatically scale up and down as needed.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="serverless-computing-a-catering-service-analogy">Serverless Computing: A Catering Service Analogy<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#serverless-computing-a-catering-service-analogy" class="hash-link" aria-label="Direct link to Serverless Computing: A Catering Service Analogy" title="Direct link to Serverless Computing: A Catering Service Analogy">​</a></h3>
<p><img loading="lazy" alt="Catering Service Analogy" src="https://wedaa.tech/docs/assets/images/01-catering-service-analogy-adaf44c7098d69ce237b4b79d9ce91c5.png" width="1480" height="722" class="img_ev3q"></p><p align="center"><a href="https://www.freepik.com/premium-vector/catering-concept-illustration-idea-food-service-hotel-event-restaurant-banquet-party-catering-service-web-banner-illustration_10275389.htm" target="_blank" rel="noopener noreferrer">Catering Service Analogy</a></p><p></p>
<p>Imagine you're hosting a dinner party. In a traditional hosting scenario, you'd have to plan everything from cooking the food to setting the table and serving your guests. This is like managing servers in traditional computing – you have to handle all the details yourself.</p>
<p>Now, consider a serverless approach as hiring a catering service for your party. You tell them what you need, and they take care of everything – from cooking the food to setting up and serving. You don't have to worry about the kitchen logistics or cleaning up afterward; you can focus on enjoying the party with your guests. Similarly, in serverless computing, you provide your code, and the cloud provider takes care of the infrastructure, scaling, and management, allowing you to focus on writing and improving your application.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="kubernetes-powered-serverless-introducing-knative">Kubernetes-Powered Serverless: Introducing Knative<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#kubernetes-powered-serverless-introducing-knative" class="hash-link" aria-label="Direct link to Kubernetes-Powered Serverless: Introducing Knative" title="Direct link to Kubernetes-Powered Serverless: Introducing Knative">​</a></h3>
<p><img loading="lazy" alt="Serverless Framework Knative" src="https://wedaa.tech/docs/assets/images/02-serverless-framework-knative-257bb2f43332d877463ef0e79344d262.png" width="1895" height="849" class="img_ev3q"></p><p align="center"><a href="https://www.serverless.com/blog/serverless-framework-knative-component" target="_blank" rel="noopener noreferrer">Serverless Framework Knative</a></p><p></p>
<p>In the rapidly evolving landscape of cloud computing, serverless technology has become increasingly popular for its simplicity in deploying applications without worrying about infrastructure. Knative, built on top of Kubernetes (k8s), extends the power of Kubernetes to manage serverless workloads seamlessly. While major cloud providers like AWS, Google Cloud, and Microsoft Azure offer their serverless solutions, Knative stands out as an open-source, platform-agnostic framework.</p>
<p>Collaboratively developed by industry leaders like Google and Red Hat, Knative abstracts away the complexities of deploying, scaling, and managing containerized applications, allowing developers to focus solely on writing code without worrying about infrastructure management. Knative simplifies serverless deployments across diverse cloud environments, revolutionizing the way applications are developed and deployed in modern cloud-native architectures.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="exploring-knative-features-simplifying-serverless-deployment">Exploring Knative Features: Simplifying Serverless Deployment<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#exploring-knative-features-simplifying-serverless-deployment" class="hash-link" aria-label="Direct link to Exploring Knative Features: Simplifying Serverless Deployment" title="Direct link to Exploring Knative Features: Simplifying Serverless Deployment">​</a></h3>
<p>Serverless refers to running back-end programs and processes in the cloud. Serverless works on an as-used basis, meaning that companies only use what they pay for. Knative is a platform-agnostic solution for running serverless deployments.</p>
<p><img loading="lazy" alt="Knative Features" src="https://wedaa.tech/docs/assets/images/03-knative-features-ab0d3d0da33f8a2fcf5e74219d0e8fff.png" width="1395" height="539" class="img_ev3q"></p>
<ul>
<li>
<p><strong>Simpler Abstractions</strong>: simplifies the YAML configuration process by providing custom CRDs (Custom Resource Definitions),
streamlining the abstraction layers and making development workflows more straightforward.</p>
</li>
<li>
<p><strong>Autoscaling</strong>: autoscaling feature seamlessly adjusts resource allocation, scaling applications down to zero and up from zero based on demand.</p>
</li>
<li>
<p><strong>Progressive Rollouts</strong>: Customize your rollout strategy with Knative's Progressive Rollouts feature, offering flexibility to select the ideal
approach based on your specific requirements.</p>
</li>
<li>
<p><strong>Event Integrations</strong>: Easily manage events from diverse sources with Knative's Event Integrations, streamlining event handling for seamless integration.</p>
</li>
<li>
<p><strong>Handle Events</strong>: Effortlessly trigger handlers from the event broker with Knative's event handling capabilities, ensuring seamless integration
and streamlined workflow.</p>
</li>
<li>
<p><strong>Plugable</strong>: Knative's pluggable architecture ensures seamless integration and extension within the Kubernetes ecosystem, providing
flexibility and scalability for diverse use cases.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="knative-components">Knative Components<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#knative-components" class="hash-link" aria-label="Direct link to Knative Components" title="Direct link to Knative Components">​</a></h2>
<p>Knative has two main components that empower teams working with Kubernetes. Serving and
Eventing work together to automate and manage tasks and applications.</p>
<p><img loading="lazy" alt="Serving Eventing" src="https://wedaa.tech/docs/assets/images/04-serving-eventing-a2e56a6edb5b03ded58da4a919040440.png" width="932" height="353" class="img_ev3q"></p>
<ul>
<li><strong>Knative Serving</strong>: Allows running serverless containers in Kubernetes with ease. Knative takes care of the details of networking,
autoscaling (even to zero), and revision tracking. Teams can focus on core logic using any programming language.</li>
<li><strong>Knative Eventing</strong>: Allows universal subscription, delivery and management of events. Build modern apps by attaching compute to a
data stream with declarative event connectivity and developer friendly object models.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="knative-serving">Knative Serving<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#knative-serving" class="hash-link" aria-label="Direct link to Knative Serving" title="Direct link to Knative Serving">​</a></h3>
<p>Knative Serving defines a set of objects as Kubernetes Custom Resource Definitions (CRDs). These objects get used to define and control how your serverless workload behaves on the cluster:</p>
<p><img loading="lazy" alt="Knative Serving" src="https://wedaa.tech/docs/assets/images/05-knative-serving-81d75b163b72ae38758471ef4605a10b.png" width="644" height="432" class="img_ev3q"></p><p align="center">Savita Ashture, <a href="https://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener noreferrer">CC BY-SA 4.0</a></p><p></p>
<ul>
<li>
<p><strong>Service</strong>: A Knative Service describes a combination of a route and a configuration as shown above. It is a higher-level entity that does not provide any additional functionality. It should make it easier to deploy an application quickly and make it available. You can define the service to always route traffic to the latest revision or a pinned revision.</p>
</li>
<li>
<p><strong>Route</strong>: The Route describes how a particular application gets called and how the traffic gets distributed across the different revisions. There is a high chance that several revisions can be active in the system at any given time based on the use case in those scenarios. It's the responsibility of routes to split the traffic and assign to revisions.</p>
</li>
<li>
<p><strong>Configuration</strong>: The Configuration describes what the corresponding deployment of the application should look like. It provides a clean separation between code and configuration and follows the Twelve-Factor App methodology. Modifying a configuration creates a new revision.</p>
</li>
<li>
<p><strong>Revision</strong>: The Revision represents the state of a configuration at a specific point in time. A revision, therefore, gets created from the configuration. Revisions are immutable objects, and you can retain them for as long as useful. Several revisions per configuration may be active at any given time, and you can automatically scale up and down according to incoming traffic.</p>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="knative-serving-focuses-on">Knative Serving focuses on:<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#knative-serving-focuses-on" class="hash-link" aria-label="Direct link to Knative Serving focuses on:" title="Direct link to Knative Serving focuses on:">​</a></h4>
<ul>
<li>Rapid deployment of serverless containers.</li>
<li>Autoscaling includes scaling pods down to zero.</li>
<li>Support for multiple networking layers such as Ambassador, Contour, Kourier, Gloo, and Istio for integration into existing environments.</li>
<li>Give point-in-time snapshots of deployed code and configurations.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="knative-eventing">Knative Eventing<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#knative-eventing" class="hash-link" aria-label="Direct link to Knative Eventing" title="Direct link to Knative Eventing">​</a></h3>
<p>Knative Eventing is a collection of APIs that enable you to use an event-driven architecture with your applications. You can create components that route events from event producers to event consumers, known as sinks, that receive events.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="use-cases">Use-cases<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#use-cases" class="hash-link" aria-label="Direct link to Use-cases" title="Direct link to Use-cases">​</a></h4>
<p>General areas of application are:</p>
<ul>
<li>
<p>Publishing an event without creating a consumer. You can send events to a broker as an HTTP POST, and use binding to decouple the destination configuration from your application that produces events.</p>
</li>
<li>
<p>Consuming an event without creating a publisher. You can use a trigger to consume events from a broker based on event attributes.</p>
</li>
<li>
<p>IoT, network monitoring, application monitoring, website testing and validation, and mobile app front-end processes that act as event generators.</p>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="use-knative-eventing-when">Use Knative eventing when:<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#use-knative-eventing-when" class="hash-link" aria-label="Direct link to Use Knative eventing when:" title="Direct link to Use Knative eventing when:">​</a></h4>
<ul>
<li>
<p>When you want to publish an event without creating a consumer. You can send events to a broker as an HTTP POST, and use binding to decouple the destination configuration from your application that produces events.</p>
</li>
<li>
<p>When you want to consume an event without creating a publisher. You can use a trigger to consume events from a broker based on event attributes. The application receives events as an HTTP POST.</p>
</li>
<li>
<p>When you want to create components that route events from event producers to event consumers, known as sinks, that receive events. Sinks can also be configured to respond to HTTP requests by sending a response event.</p>
</li>
</ul>
<p><img loading="lazy" alt="Knative Eventing" src="https://wedaa.tech/docs/assets/images/06-knative-eventing-eda6ccc26ee2faba5845f2bcd75bf703.png" width="880" height="366" class="img_ev3q"></p><p align="center"><a href="https://dev.to/ashokan/knative-eventing-e95" target="_blank" rel="noopener noreferrer">Eventing Components</a></p><p></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="components">Components<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#components" class="hash-link" aria-label="Direct link to Components" title="Direct link to Components">​</a></h4>
<ul>
<li>
<p><strong>Sources</strong>: Knative eventing sources are objects that generate events and send them to a sink. They are created by instantiating a custom resource (CR) from a source object. There are different types of sources, such as PingSource, ApiServerSource, KafkaSource, etc., depending on the event producer.</p>
</li>
<li>
<p><strong>Sinks</strong>: Knative eventing sinks are objects that receive events from sources or other components. They can be Addressable or Callable resources that have an address defined in their status.address.url field. Addressable sinks can receive and acknowledge an event delivered over HTTP, while Callable sinks can also respond to HTTP requests by sending a response event. Knative Services, Channels, and Brokers are all examples of sinks.</p>
</li>
<li>
<p><strong>Brokers</strong>: Knative eventing brokers are objects that define an event mesh for collecting a pool of events. Brokers provide a discoverable endpoint for event ingress, and use triggers for event delivery. Event producers can send events to a broker by posting the event.</p>
</li>
<li>
<p><strong>Channels</strong>: Channels are custom resources that define a single event-forwarding and persistence layer. You can connect channels to various backends for sourcing events, such as In-Memory, Kafka, or GCP PubSub. You can also fan-out received events, through subscriptions, to multiple destinations, or sinks. Examples of sinks include brokers and Knative services.</p>
</li>
<li>
<p><strong>Subscriptions</strong>: Knative subscriptions are objects that enable event delivery from a channel to an event sink, also known as a subscriber. A subscription specifies the channel and the sink to deliver events to, as well as some sink-specific options, such as how to handle failures.</p>
</li>
<li>
<p><strong>Triggers</strong>: Knative Triggers are objects that enable seamless integration with external event sources, allowing applications to react dynamically to incoming events, fostering the development of scalable, event-driven architectures.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://wedaa.tech/docs/blog/2024/04/13/overview-on-knative#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this overview, we've explored serverless computing with Knative on Kubernetes, covering core concepts, features, and components. Stay tuned for practical implementations and real-world use cases in upcoming blogs, unlocking Knative's full potential for your projects. With Knative, the future of serverless on Kubernetes is brighter than ever.</p>
<p>Furthermore, I'm excited to announce that our platform, <a href="https://app.wedaa.tech/" target="_blank" rel="noopener noreferrer">WeDAA</a>, will be hosting these upcoming blogs. WeDAA is committed to providing innovative solutions, and soon, we'll be incorporating serverless capabilities into our platform. Keep an eye out for our future updates, as we continue to evolve and enhance our services to meet your needs.</p>
<p>Continue your exploration of Knative by diving into our next blog on Knative Serving <a href="https://www.wedaa.tech/docs/blog/2024/05/01/knative-serving-01" target="_blank" rel="noopener noreferrer">Definitive Guide to Knative Serving—A Deep Dive into Theory and Architecture</a>!</p>]]></content>
        <category label="microservices" term="microservices"/>
        <category label="architecture" term="architecture"/>
        <category label="cloud-native" term="cloud-native"/>
        <category label="Serverless" term="Serverless"/>
        <category label="cloud computing" term="cloud computing"/>
        <category label="knative" term="knative"/>
        <category label="kubernetes" term="kubernetes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rapid Application Prototyping (RAP)]]></title>
        <id>https://wedaa.tech/docs/blog/2024/04/08/rapid-application-prototyping</id>
        <link href="https://wedaa.tech/docs/blog/2024/04/08/rapid-application-prototyping"/>
        <updated>2024-04-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Rapid Application Prototyping (RAP)]]></summary>
        <content type="html"><![CDATA[<p>With the long history of software development, one debate persists: should we prioritize solid application architecture and adhere to best development practices before building a working prototype, or should we quickly create a functional prototype to validate the idea before investing considerable time and resources in identifying technology and architecture?</p>
<p>Given the rapid evolution of technologies and the increasing demands of business requirements, right approach is to emphasises speed while ensuring the quality and robustness of the application or architecture.</p>
<p>Rapid Application Prototyping (RAP) offers a valuable method to put ideas into action and comprehend both the technical and functional aspects of a solution. Rapid Application Prototyping (RAP) is an approach that prioritizes building and displaying the minimum viable functional view of an application as soon as possible.</p>
<p>Few essential aspects of platforms supporting Rapid Application Prototypes.</p>
<p><strong>Modularity</strong>: A prototype should be developed using modern modular architecture patterns, enabling easy integration or modification of business features and technical solutions. Modularity facilitates the construction and maintenance of smaller, more manageable components.</p>
<p><img loading="lazy" alt="Modularity" src="https://wedaa.tech/docs/assets/images/modularity-8e9d86ce8a8d23579799f975e1de92ad.png" width="1396" height="1000" class="img_ev3q"></p>
<p><strong>Loose Coupling</strong>: Modular components of the application should possess well-defined interfaces to encourage loose coupling among them. Loose coupling simplifies the integration of new features or technologies.</p>
<p><img loading="lazy" alt="Loose Coupling" src="https://wedaa.tech/docs/assets/images/loose-coupling-0aff030157bb55f69a892cbd025ed4f2.png" width="1276" height="790" class="img_ev3q"></p>
<p><strong>Scalability</strong>: A RAP platform should support the construction of a scalable architecture, enabling preliminary horizontal scaling of modular components. Scalability is crucial for creating resilient and high-performance systems.</p>
<p><img loading="lazy" alt="Scalability" src="https://wedaa.tech/docs/assets/images/scalability-a4e27d56491069062102ede78272a3c8.png" width="1176" height="804" class="img_ev3q"></p>
<p><strong>Resilience and Robustness</strong>: In the event of a component failure or issue, the entire system should not necessarily collapse. Failures should be contained within the affected module or service, minimizing their impact on other parts of the application. The modules or services within an application should demonstrate robustness, meaning they can gracefully handle failures, unexpected conditions, and varying loads while maintaining overall functionality and availability.</p>
<p><img loading="lazy" alt="Resilience and Robustness" src="https://wedaa.tech/docs/assets/images/resilience-cb91ebd8adf0989f169d6ab35a7e0992.png" width="1313" height="1000" class="img_ev3q"></p>
<p><a href="https://app.wedaa.tech/" target="_blank" rel="noopener noreferrer">WeDAA</a> engineering platform empower developers to build Rapid Application Prototypes (RAP) quickly with all the essential features required for building a well architected enterprise application.</p>]]></content>
        <category label="prototyping" term="prototyping"/>
        <category label="architecture" term="architecture"/>
        <category label="bestpractices" term="bestpractices"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building event driven microservices architecture with RabbitMQ]]></title>
        <id>https://wedaa.tech/docs/blog/2024/01/15/rabbitmq</id>
        <link href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq"/>
        <updated>2024-01-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Building event driven microservices architecture with RabbitMQ]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-story">The Story<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#the-story" class="hash-link" aria-label="Direct link to The Story" title="Direct link to The Story">​</a></h2>
<p><img loading="lazy" alt="Sample Message Broker App" src="https://wedaa.tech/docs/assets/images/message-brokers-app-ffb34699577c2083c49c9671356ac45b.png" width="3388" height="1408" class="img_ev3q"></p>
<p>Imagine we're building a simple e-commerce application. When a customer places an order, it's not instantly whisked away by elves. Instead, the order details – a message filled with product information, shipping address, and payment details – gets sent to a queue managed by a message broker.</p>
<p>Meanwhile, our order processing system sits like a hungry rabbit, constantly checking the queue for new messages. Once it grabs an order message, it springs into action: verifying payment, notifying the warehouse, and sending updates to the customer. All without the two systems ever needing to directly talk to each other!</p>
<p>This decoupling is the superpower of message brokers. Applications don't need to know the specifics of each other's internal workings. They simply send and receive messages, leaving the orchestration to the broker. This makes systems more flexible, scalable, and resilient.</p>
<p>Let's delve deeper into this rabbit hole, using RabbitMQ as our trusty guide.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-technology">The Technology<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#the-technology" class="hash-link" aria-label="Direct link to The Technology" title="Direct link to The Technology">​</a></h2>
<p>RabbitMQ is a popular open-source message broker, and it's a great starting point to understand the magic behind these event-driven systems.</p>
<ul>
<li>It is used worldwide at small startups and large enterprises.</li>
<li>It is lightweight and easy to deploy on premises and in the cloud.</li>
<li>It can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.</li>
<li>It runs on many operating systems and cloud environments, and provides a wide range of developer tools for most popular languages.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-concepts">The Concepts<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#the-concepts" class="hash-link" aria-label="Direct link to The Concepts" title="Direct link to The Concepts">​</a></h3>
<p><img loading="lazy" src="https://www.rabbitmq.com/img/tutorials/python-three.png" alt="RabbitMQ Concepts" class="img_ev3q"></p>
<ul>
<li>Message: It is the fundamental unit of communication in RabbitMQ. It contains the data being sent from the producer to the consumer. It is like a post carrying a message.</li>
<li>Producer: A producer is an application or component that sends messages to RabbitMQ. It is like a person sending the post.</li>
<li>Consumer: A consumer is an application or component that receives and processes messages from RabbitMQ. It is a person receiving the post.</li>
<li>Queue: A queue is a buffer that stores messages until they are consumed. Messages are placed in queues by producers and retrieved by consumers. It is a postbox that stores messages of a person.</li>
<li>Exchange: An exchange is a routing mechanism that receives messages from producers and routes them to queues. It is like a post office.</li>
<li>Routing Key: A routing key is a property of a message that is used by exchanges to determine which queues should receive the message. This is like a mailing address for a post.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-tutorial">The Tutorial<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#the-tutorial" class="hash-link" aria-label="Direct link to The Tutorial" title="Direct link to The Tutorial">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="generate-prototype-from-wedaa">Generate prototype from WeDAA<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#generate-prototype-from-wedaa" class="hash-link" aria-label="Direct link to Generate prototype from WeDAA" title="Direct link to Generate prototype from WeDAA">​</a></h3>
<p>Use below Architecture as reference and generate a project from <a href="https://app.wedaa.tech/canvastocode" target="_blank" rel="noopener noreferrer">WeDAA</a></p>
<p>All the code mentioned in the blog will be generated by WeDAA. It can be further extended as necessary.</p>
<p><img loading="lazy" alt="Sample RabbitMQ WeDAA Architecture" src="https://wedaa.tech/docs/assets/images/rabbitmq-demo-arch-2c363c76b779748984b215aeeec002ea.png" width="2998" height="1709" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rabbitmq-configuration">RabbitMQ Configuration<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#rabbitmq-configuration" class="hash-link" aria-label="Direct link to RabbitMQ Configuration" title="Direct link to RabbitMQ Configuration">​</a></h3>
<p><strong>RabbitMQConfigOrdersToInventory</strong> class in orders service registers Queue, Exchange, Binding and Message Converters are as beans for auto-configuration in Spring AMPQ.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">@Configuration</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public class RabbitMQConfigOrdersToInventory {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public static final String QUEUE = "OrdersToInventory_message_queue";</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public static final String EXCHANGE = "OrdersToInventory_message_exchange";</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public static final String ROUTING_KEY = "OrdersToInventory_message_routingKey";</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public Queue queueOrdersToInventory() {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return new Queue(QUEUE);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public TopicExchange exchangeOrdersToInventory() {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return new TopicExchange(EXCHANGE);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public Binding bindingOrdersToInventory() {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return BindingBuilder.bind(this.queueOrdersToInventory()).to(this.exchangeOrdersToInventory()).with(ROUTING_KEY);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public MessageConverter messageConverter() {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return new Jackson2JsonMessageConverter();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    @Bean</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    public AmqpTemplate template(ConnectionFactory connectionFactory) {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        RabbitTemplate template = new RabbitTemplate(connectionFactory);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        template.setMessageConverter(messageConverter());</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        return template;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="message-producer">Message Producer<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#message-producer" class="hash-link" aria-label="Direct link to Message Producer" title="Direct link to Message Producer">​</a></h3>
<p><strong>RabbitMQProducerOrdersToInventory</strong> class in orders service sends a message to the exchange every 15 seconds.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">@Scheduled(cron = "0/15 * * * * *")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">public void publishMessage() {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    RabbitMessageModel message = new RabbitMessageModel();</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    message.setMessage("Publishing this message from orders with key: " + RabbitMQConfigOrdersToInventory.QUEUE);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    message.setDateTime(new Date());</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    template.convertAndSend(RabbitMQConfigOrdersToInventory.EXCHANGE, RabbitMQConfigOrdersToInventory.ROUTING_KEY, message);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    logger.info("Message Published Successfully");</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="message-consumer">Message Consumer<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#message-consumer" class="hash-link" aria-label="Direct link to Message Consumer" title="Direct link to Message Consumer">​</a></h3>
<p><strong>RabbitMQConsumerOrdersToInventory</strong> in the inventory service starts receiving the messages as the messages are sent by the Producer.</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">msgs</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> err </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> channel</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Consume</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    queueName</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token boolean" style="color:rgb(255, 88, 116)">nil</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">forever </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">make</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">chan</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">bool</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">go</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">func</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">for</span><span class="token plain"> d </span><span class="token operator" style="color:rgb(137, 221, 255)">:=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">range</span><span class="token plain"> msgs </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">Infof</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"Received Message: %s\n"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">Body</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;-</span><span class="token plain">forever</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-execution">The execution<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#the-execution" class="hash-link" aria-label="Direct link to The execution" title="Direct link to The execution">​</a></h3>
<ol>
<li>
<p>Bootup the RabbitMQ server</p>
<p>WeDAA provides dockerfile for starting RabbitMQ server quickly.
It can be found in both inventory and orders service.</p>
<p>RabbitMQ server can be started using below command from orders service.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">docker compose -f src/main/docker/rabbitmq.yml up --wait</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>RabbitMQ's management console can be accessed on <a href="http://localhost:15672/" target="_blank" rel="noopener noreferrer">http://localhost:15672/</a></p>
<p>Default username: <em>guest</em>, password: <em>guest</em></p>
</li>
<li>
<p>Start the orders service</p>
<p>In the sample architecture, orders service acts as producer.
Start the service using the following command</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">./mvnw</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once the service is started, it can be seen from the logs that messages are sent periodically.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15T20:35:00.015+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15T20:35:15.008+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15T20:35:30.003+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15T20:35:45.002+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Start the inventory service</p>
<p>In the sample architecture, inventory service acts as consumer.</p>
<p>Build and start the service using the following commands</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">go mod tidy</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">go run .</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once started, inventory service starts consuming the messages sent by orders service.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":1,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331085013}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":2,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331100012}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":3,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331115005}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":4,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331130001}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Track activity on RabbitMQ management console</p>
</li>
</ol>
<p><img loading="lazy" alt="RabbitMQ Exchange" src="https://wedaa.tech/docs/assets/images/exchange-ec722c1ef354f4fbc7c49ea423a90dd6.png" width="2036" height="1320" class="img_ev3q"></p>
<p><img loading="lazy" alt="RabbitMQ Queue" src="https://wedaa.tech/docs/assets/images/queue-a76c8c5dc445c1d68b11dfddc14b7bed.png" width="2184" height="1464" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-conclusion">The Conclusion<a href="https://wedaa.tech/docs/blog/2024/01/15/rabbitmq#the-conclusion" class="hash-link" aria-label="Direct link to The Conclusion" title="Direct link to The Conclusion">​</a></h2>
<p>This blog gives a head start on making use of RabbitMQ to orchestrate your event-driven microservice application architectures.</p>
<p>Learn more from: <a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/getstarted.html</a></p>]]></content>
        <category label="microservices" term="microservices"/>
        <category label="messagebrokers" term="messagebrokers"/>
        <category label="rabbitmq" term="rabbitmq"/>
        <category label="eventdriven" term="eventdriven"/>
        <category label="architecture" term="architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Securing React applications with Keycloak]]></title>
        <id>https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app</id>
        <link href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app"/>
        <updated>2023-12-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Intergating Keycloak with React app with "react-oidc-context"]]></summary>
        <content type="html"><![CDATA[<p>In the fast-paced world of web development, prioritizing the security of our applications is paramount. This blog post takes you on a journey to enhance the security of your React app by seamlessly integrating it with <a href="https://www.keycloak.org/documentation" target="_blank" rel="noopener noreferrer"><strong>Keycloak</strong></a>, a robust authentication and authorization server. To simplify this process, we'll leverage the npm package <a href="https://www.npmjs.com/package/react-oidc-context" target="_blank" rel="noopener noreferrer"><strong>react-oidc-context</strong></a>, bridging React and Keycloak while implementing OpenID Connect (OIDC). Whether you're a seasoned developer or just stepping into React and authentication, this post provides practical insights to bolster the security posture of your web application. Let's dive into the world of React, Keycloak, and react-oidc-context for a more secure development experience.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-quickstart">🚀 Quickstart:<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-quickstart" class="hash-link" aria-label="Direct link to 🚀 Quickstart:" title="Direct link to 🚀 Quickstart:">​</a></h3>
<ol>
<li>
<p>Visit <a href="https://app.wedaa.tech/" target="_blank" rel="noopener noreferrer"><strong>app.wedaa.tech</strong></a></p>
</li>
<li>
<p>Click on the "Static Web page" component</p>
<p><img loading="lazy" src="https://i.imgur.com/aCPQE39.png" alt="Choose Framework" class="img_ev3q"></p>
</li>
<li>
<p>Select a frontend framework: React, then click next</p>
<p><img loading="lazy" src="https://i.imgur.com/ROlem4b.png" alt="Choose React" class="img_ev3q"></p>
</li>
<li>
<p>Choose Authentication and Authorization: Keycloak, then click Next</p>
<p><img loading="lazy" src="https://i.imgur.com/3dX4Ttc.png" alt="Choose Keycloak" class="img_ev3q"></p>
</li>
<li>
<p>Review your project composition and confirm by clicking "Go to Canvas"</p>
<p><img loading="lazy" src="https://i.imgur.com/KNTDOUt.png" alt="Review Composition" class="img_ev3q"></p>
</li>
<li>
<p>Provide a valid name to your prototype and click on "Validate"</p>
<p><img loading="lazy" src="https://i.imgur.com/FVw7YEp.png" alt="Prototype Validation" class="img_ev3q"></p>
</li>
<li>
<p>Review your prototype configuration, then click Next</p>
<p><img loading="lazy" src="https://i.imgur.com/NYlY6pF.png" alt="Prototype Configuration" class="img_ev3q"></p>
</li>
<li>
<p>Finally, click "Generate Code" to download the secured React application</p>
<p><img loading="lazy" src="https://i.imgur.com/kJiRTHB.png" alt="Generate Code" class="img_ev3q"></p>
</li>
</ol>
<p>WeDAA offers a pre-configured React application secured by Keycloak. Simply extract our application, follow the instructions in the README, and initiate your application to seamlessly experience it first-hand.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-understanding-the-generated-code">🧠 Understanding the Generated Code<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-understanding-the-generated-code" class="hash-link" aria-label="Direct link to 🧠 Understanding the Generated Code" title="Direct link to 🧠 Understanding the Generated Code">​</a></h3>
<ol>
<li>src/index.js</li>
</ol>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Code for initializing React application with authentication and authorization capabilities.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">ReactDOM</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react-dom/client'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'./index.css'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">App</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'./App'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">reportWebVitals</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'./reportWebVitals'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">AuthProvider</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react-oidc-context'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> oidcConfig </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">authority</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_OIDC_AUTHORITY</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">client_id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_OIDC_CLIENT_ID</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_PROJECT_URL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> root </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token maybe-class-name">ReactDOM</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">createRoot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token dom variable" style="color:rgb(191, 199, 213)">document</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getElementById</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'root'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">root</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">render</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">AuthProvider</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token tag spread" style="color:rgb(255, 85, 114)">oidcConfig</span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">App</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">AuthProvider</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// If you want to start measuring performance in your app, pass a function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// to log results (for example: reportWebVitals(console.log))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">reportWebVitals</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>
<p>This code initializes a React application with authentication and authorization capabilities using the <a href="https://www.npmjs.com/package/react-oidc-context" target="_blank" rel="noopener noreferrer"><strong>react-oidc-context</strong></a> library.</p>
</li>
<li>
<p>The main application (App) is wrapped in an AuthProvider with configurations derived from the OIDC parameters specified in the oidcConfig object.</p>
</li>
<li>
<p>The oidcConfig object contains configuration parameters required for OpenID Connect authentication.</p>
</li>
<li>
<p>Environment variables (<code>REACT_APP_OIDC_AUTHORITY, REACT_APP_OIDC_CLIENT_ID, and REACT_APP_PROJECT_URL</code>) are used to dynamically set these values.</p>
</li>
</ul>
<ol start="2">
<li>dotenv (.env file)</li>
</ol>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Environment variables for configuring the React application.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">PORT</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token number" style="color:rgb(247, 140, 108)">4200</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">GENERATE_SOURCEMAP</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_PROJECT_NAME</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">webapp</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_PROJECT_URL</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">http</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">localhost</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token number" style="color:rgb(247, 140, 108)">4200</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># </span><span class="token constant" style="color:rgb(130, 170, 255)">WEDAA</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_WEDAA_DOCS</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">https</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">wedaa</span><span class="token operator" style="color:rgb(137, 221, 255)">-</span><span class="token plain">tech</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">github</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">io</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_WEDAA_GITHUB</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">https</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">github</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">com</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">wedaa</span><span class="token operator" style="color:rgb(137, 221, 255)">-</span><span class="token plain">tech</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># </span><span class="token constant" style="color:rgb(130, 170, 255)">OIDC</span><span class="token plain"> </span><span class="token maybe-class-name">Configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_OIDC_AUTHORITY</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">http</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">localhost</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token number" style="color:rgb(247, 140, 108)">9080</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">realms</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">jhipster</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_OIDC_CLIENT_ID</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">web_app</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>src/config/auth/privateRoute.js</li>
</ol>
<div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Code for defining a PrivateRoute component for protecting routes based on authentication status.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> useAuth </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react-oidc-context'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(130, 170, 255)">PrivateRoute</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> children </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> auth </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useAuth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">activeNavigator</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'signinSilent'</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Signing you in...</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'signoutRedirect'</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Signing you out...</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">isLoading</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// &lt;div&gt;Loading...&lt;/div&gt;;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Oops... </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">isAuthenticated</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> originPath </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">location</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">signinRedirect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">redirect_uri</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">REACT_APP_PROJECT_URL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">concat</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">originPath</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">isAuthenticated</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">history</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">replaceState</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(191, 199, 213)">document</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">title</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">location</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">children</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">PrivateRoute</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>
<p>This code defines a React component called PrivateRoute that serves as a wrapper for protecting certain routes in your application based on authentication status.</p>
</li>
<li>
<p>The PrivateRoute component takes a children prop, which represents the content that should be rendered if the user is authenticated.</p>
</li>
<li>
<p>Switch statement checks the activeNavigator property in the authentication context. If the user is in the process of a silent sign-in or sign-out redirect, it displays a corresponding message.</p>
</li>
<li>
<p>If the authentication context is still loading, the component returns an empty div (essentially doing nothing until authentication data is available).</p>
</li>
<li>
<p>If the user is not authenticated, it initiates a redirection to the authentication server using the signinRedirect method. It also captures the current path to redirect the user back to the intended page after authentication.</p>
</li>
<li>
<p>If the user is authenticated, it updates the browser history to remove sensitive information and renders the original children content.</p>
</li>
</ul>
<ol start="4">
<li>docker/</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">|_docker</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |_realm-config</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            |_jhipster-realm.json</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |_keycloak.yml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>
<p>The Docker directory houses a Docker Compose configuration for Keycloak. This configuration initiates a Keycloak container that serves as the authentication server for our React application.</p>
</li>
<li>
<p>Within the docker/realm-config directory, there is a JSON-formatted realm configuration. This information, presented in JSON format, is essential for our React application as it serves as the OIDC (OpenID Connect) configuration.</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-getting-started">🚦 Getting Started<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-getting-started" class="hash-link" aria-label="Direct link to 🚦 Getting Started" title="Direct link to 🚦 Getting Started">​</a></h3>
<ol>
<li>Start the keycloak server</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm run docker:keycloak:up</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>Install dependencies for the first time.</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm install</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>Start you React application</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-example-images-in-action">📸 Example images in action<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-example-images-in-action" class="hash-link" aria-label="Direct link to 📸 Example images in action" title="Direct link to 📸 Example images in action">​</a></h3>
<ol>
<li>
<p>Home page of the React application generated via WeDAA.</p>
<p><img loading="lazy" src="https://i.imgur.com/WPwAEL9.png" alt="Home page" class="img_ev3q"></p>
</li>
<li>
<p>Login Page for the React application powered by keycloak (click on the sign in button to land on this page, by default two users are provided [user,admin]; password is same as username).</p>
<p><img loading="lazy" src="https://i.imgur.com/betJU5z.png" alt="Login Page" class="img_ev3q"></p>
</li>
<li>
<p>Home page after sucessful Login.</p>
<p><img loading="lazy" src="https://i.imgur.com/RuRXzHs.png" alt="Logged In Home page" class="img_ev3q"></p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-conclusion">✨ Conclusion<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-conclusion" class="hash-link" aria-label="Direct link to ✨ Conclusion" title="Direct link to ✨ Conclusion">​</a></h2>
<p>Congratulations! 🎉 You've successfully navigated the realm of securing your React applications with the formidable duo of Keycloak and <code>react-oidc-context</code>. As you embark on your coding journey, armed with a fortified understanding of authentication and authorization, here's a recap of your key accomplishments:</p>
<ul>
<li>Seamlessly integrated Keycloak as the authentication and authorization powerhouse.</li>
<li>Leveraged the elegance of <code>react-oidc-context</code> to bridge the realms of React and OpenID Connect.</li>
<li>Initiated a secure React application that not only prioritizes user experience but also champions data protection.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-quick-dive">🚀 Quick Dive<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-quick-dive" class="hash-link" aria-label="Direct link to 🚀 Quick Dive" title="Direct link to 🚀 Quick Dive">​</a></h3>
<p>Before you go, let's take one last glance at the live example you've created. Head over to <a href="https://app.wedaa.tech/" target="_blank" rel="noopener noreferrer"><strong>app.wedaa.tech</strong></a> and witness your React application in action. From dynamic prototyping to authentication magic, your creation stands as a testament to your development prowess.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-further-exploration">🛠️ Further Exploration<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#%EF%B8%8F-further-exploration" class="hash-link" aria-label="Direct link to 🛠️ Further Exploration" title="Direct link to 🛠️ Further Exploration">​</a></h3>
<p>As you continue your coding adventures, explore the depths of the generated code. Whether it's delving into the intricacies of <code>src/index.js</code>, configuring environment variables in <code>.env</code>, or understanding the protective dance of <code>src/config/auth/privateRoute.js</code>, every line of code tells a story of security, creativity, and innovation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-beyond-the-horizon">🌐 Beyond the Horizon<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-beyond-the-horizon" class="hash-link" aria-label="Direct link to 🌐 Beyond the Horizon" title="Direct link to 🌐 Beyond the Horizon">​</a></h3>
<p>For more insights and documentation, sail over to the <a href="https://www.wedaa.tech/docs/introduction/what-is-wedaa/" target="_blank" rel="noopener noreferrer"><strong>WeDAA Documentation</strong></a> and explore the GitHub repository at <a href="https://github.com/wedaa-tech" target="_blank" rel="noopener noreferrer"><strong>github.com/wedaa-tech</strong></a>. Your journey doesn't end here – it's a launching pad for future projects, collaborations, and secure web development endeavors.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-ready-set-code">🚀 Ready, Set, Code!<a href="https://wedaa.tech/docs/blog/2023/12/26/Intergating-keycloak-with-react-app#-ready-set-code" class="hash-link" aria-label="Direct link to 🚀 Ready, Set, Code!" title="Direct link to 🚀 Ready, Set, Code!">​</a></h2>
<p>Armed with the knowledge and hands-on experience gained in this blog post, you're now equipped to conquer the world of React security. Start your engines, dive into the code, and let your creativity unfold. Happy coding, and may your React applications always be secure and splendid! 🌟</p>]]></content>
        <category label="keycloak" term="keycloak"/>
        <category label="react" term="react"/>
        <category label="authentication" term="authentication"/>
        <category label="prototyping" term="prototyping"/>
        <category label="boilerplate" term="boilerplate"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Transitioning from Boilerplate Development to Scaffolding Frameworks]]></title>
        <id>https://wedaa.tech/docs/blog/2023/11/11/boilerplate-to-scaffolding</id>
        <link href="https://wedaa.tech/docs/blog/2023/11/11/boilerplate-to-scaffolding"/>
        <updated>2023-11-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Transitioning from Boilerplate Development to Scaffolding Frameworks]]></summary>
        <content type="html"><![CDATA[<p>In our ever-evolving tech landscape, we continually encounter new tools and technologies for constructing common software structures. With technology's daily progress, we witness fresh parameters and approaches applied to our existing setups.</p>
<p>To draw a parallel, consider the preparation of a delectable Biryani. The first step is to gather the right ingredients before diving into cooking. Spices, curd, salt, rice, and, of course, gasoline are essential. Most of these ingredients remain constant for everyone, while the art of cooking is what distinguishes one chef from another. Given that the ingredients remain the same, isn't it impractical to painstakingly prepare them from scratch each time we crave Biryani? It certainly is.</p>
<p>In contrast to the culinary world, in software engineering, we often find ourselves writing and configuring all components from scratch each time we embark on building a software solution.</p>
<p>Let's consider a hypothetical scenario in software engineering: creating a full-stack application. It entails the development of numerous microservices, handling discovery, gateway, and inter-service communication. Additionally, we must set up logging, observability, security, and privacy mechanisms. Now, ponder this: countless others have undertaken these exact same tasks tens of thousands of times. Isn't it time to rethink our approach and prepare and assemble common technical components in advance, much like having essential spices ready when cooking Biryani.</p>
<p>Starting from scratch each time leads to complications, extended development timelines, and monotony. As a software project expands and requires more boilerplate code, a developer's workload becomes increasingly burdensome. We must simultaneously ensure a solid foundation for our application's architecture. So, the question arises: where do we seek a solution? The answer lies in a scaffolding platform, where we build common components once and assemble them as needed.</p>
<p>Scaffolding represents a modern approach to generating the common building blocks of an application and configuring them to meet the software requirements. An effective scaffold might encompass features such as login and registration pages, service and server connections, routing, discovery, model templates, controllers, security, privacy, and observability mechanisms.</p>
<p>The next time you embark on application development, consider WeDAA, a platform designed for rapid prototyping and scaffolding of technologies and applications.</p>
<p>What You'll Achieve:</p>
<p>Expedited proposal development.
Unified systems for design, configurations, and asset control.
Enhanced security and privacy standards right from the start.
More time to focus on your unique business case rather than common tasks."</p>]]></content>
        <category label="prototyping" term="prototyping"/>
        <category label="boilerplate" term="boilerplate"/>
    </entry>
</feed>