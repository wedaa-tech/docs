"use strict";(self.webpackChunkdocusaurus_documentation=self.webpackChunkdocusaurus_documentation||[]).push([[7356],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,y=m["".concat(p,".").concat(c)]||m[c]||d[c]||l;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={},o="Deployment",i={unversionedId:"Documentation/Archive/WDA/Deployment",id:"Documentation/Archive/WDA/Deployment",title:"Deployment",description:"Deployment information is about how you would like to deploy your application.",source:"@site/docs/Documentation/Archive/WDA/Deployment.md",sourceDirName:"Documentation/Archive/WDA",slug:"/Documentation/Archive/WDA/Deployment",permalink:"/Documentation/Archive/WDA/Deployment",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Communication",permalink:"/Documentation/Archive/WDA/Communication"},next:{title:"Description",permalink:"/Documentation/Archive/WDA/"}},p={},u=[{value:"Available Deployment Options",id:"available-deployment-options",level:4},{value:"Deployment Type",id:"deployment-type",level:4},{value:"Application Folders",id:"application-folders",level:4},{value:"Docker Repository Name",id:"docker-repository-name",level:4},{value:"Kubernetes Namespace",id:"kubernetes-namespace",level:4},{value:"Enable Kubernetes Dynamic Storage",id:"enable-kubernetes-dynamic-storage",level:4},{value:"Kubernetes Storage Provisioner",id:"kubernetes-storage-provisioner",level:4},{value:"Ingress Domain",id:"ingress-domain",level:4},{value:"Ingress Type",id:"ingress-type",level:4},{value:"Service Discovery Type",id:"service-discovery-type",level:4}],s={toc:u},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deployment"},"Deployment"),(0,a.kt)("p",null,"Deployment information is about how you would like to deploy your application."),(0,a.kt)("h4",{id:"available-deployment-options"},"Available Deployment Options"),(0,a.kt)("p",null,"Here are the deployment options supported:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option name"),(0,a.kt)("th",{parentName:"tr",align:null},"Default value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible values"),(0,a.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DeploymentType"),(0,a.kt)("td",{parentName:"tr",align:null},"docker-compose"),(0,a.kt)("td",{parentName:"tr",align:null},"docker-compose, kubernetes, openshift"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"AppsFolders"),(0,a.kt)("td",{parentName:"tr",align:null},"[]"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Directory names for the applications separated by comma. Must be a list, example ","[foo, bar]")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Monitoring"),(0,a.kt)("td",{parentName:"tr",align:null},"no"),(0,a.kt)("td",{parentName:"tr",align:null},"no, prometheus"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ServiceDiscoveryType"),(0,a.kt)("td",{parentName:"tr",align:null},"eureka"),(0,a.kt)("td",{parentName:"tr",align:null},"eureka, consul, no"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DockerRepositoryName"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"The name or URL of the docker repository. Must be in double quotes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"KubernetesNamespace"),(0,a.kt)("td",{parentName:"tr",align:null},"default"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"Applicable only when deploymentType is kubernetes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"KubernetesUseDynamicStorage"),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"true, false"),(0,a.kt)("td",{parentName:"tr",align:null},"Applicable only when deploymentType is kubernetes, enables the kubernetesStorageClassName option")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"KubernetesServiceType"),(0,a.kt)("td",{parentName:"tr",align:null},"LoadBalancer"),(0,a.kt)("td",{parentName:"tr",align:null},"LoadBalancer, NodePort, Ingress"),(0,a.kt)("td",{parentName:"tr",align:null},"Applicable only when deploymentType is kubernetes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"IngressDomain"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"The domain for Ingress when kubernetesServiceType is ",(0,a.kt)("inlineCode",{parentName:"td"},"Ingress"),". Must be in double quotes. Applicable only when deploymentType is kubernetes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"IngressType"),(0,a.kt)("td",{parentName:"tr",align:null},"nginx"),(0,a.kt)("td",{parentName:"tr",align:null},"nginx, gke"),(0,a.kt)("td",{parentName:"tr",align:null},"The kubernetes ingress type, only set when ",(0,a.kt)("inlineCode",{parentName:"td"},"kubernetesServiceType")," is set to Ingress")))),(0,a.kt)("p",null,"During deployment, you will be prompted to provide the following information:"),(0,a.kt)("h4",{id:"deployment-type"},"Deployment Type"),(0,a.kt)("p",null,"The deployment type you want to use, in this case Kubernetes."),(0,a.kt)("h4",{id:"application-folders"},"Application Folders"),(0,a.kt)("p",null,"The folder(s) containing your application code."),(0,a.kt)("h4",{id:"docker-repository-name"},"Docker Repository Name"),(0,a.kt)("p",null,"The name of the Docker repository you want to use for your container images."),(0,a.kt)("h4",{id:"kubernetes-namespace"},"Kubernetes Namespace"),(0,a.kt)("p",null,"The Kubernetes namespace you want to use for your deployment."),(0,a.kt)("h4",{id:"enable-kubernetes-dynamic-storage"},"Enable Kubernetes Dynamic Storage"),(0,a.kt)("p",null,"Whether to use dynamic storage provisioning in Kubernetes (set to Yes or No)."),(0,a.kt)("h4",{id:"kubernetes-storage-provisioner"},"Kubernetes Storage Provisioner"),(0,a.kt)("p",null,"The storage provisioner to use for dynamic storage provisioning in Kubernetes."),(0,a.kt)("h4",{id:"ingress-domain"},"Ingress Domain"),(0,a.kt)("p",null,"The domain name to use for your Ingress resource."),(0,a.kt)("h4",{id:"ingress-type"},"Ingress Type"),(0,a.kt)("p",null,"The type of Ingress controller you want to use, such as Nginx."),(0,a.kt)("h4",{id:"service-discovery-type"},"Service Discovery Type"),(0,a.kt)("p",null,"The service discovery type you want to use, such as Eureka."))}d.isMDXComponent=!0}}]);