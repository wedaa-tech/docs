"use strict";(self.webpackChunkdocusaurus_documentation=self.webpackChunkdocusaurus_documentation||[]).push([[2717],{4168:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2024/01/15/rabbitmq","metadata":{"permalink":"/docs/blog/2024/01/15/rabbitmq","source":"@site/blog/2024-01-15-rabbitmq.md","title":"Event driven Architectures with RabbitMQ","description":"Build event driven Microservices Architectures with RabbitMQ","date":"2024-01-15T00:00:00.000Z","formattedDate":"January 15, 2024","tags":[{"label":"microservices","permalink":"/docs/blog/tags/microservices"},{"label":"messagebrokers","permalink":"/docs/blog/tags/messagebrokers"},{"label":"rabbitmq","permalink":"/docs/blog/tags/rabbitmq"},{"label":"eventdriven","permalink":"/docs/blog/tags/eventdriven"},{"label":"architecture","permalink":"/docs/blog/tags/architecture"}],"readingTime":4.65,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Event driven Architectures with RabbitMQ","description":"Build event driven Microservices Architectures with RabbitMQ","image":"https://www.wedaa.tech/docs/img/blog/rabbitmq/rabbitmq.png","tags":["microservices","messagebrokers","rabbitmq","eventdriven","architecture"],"date":"2024-01-15T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Securing React applications with Keycloak","permalink":"/docs/blog/2023/12/26/Intergating-keycloak-with-react-app"}},"content":"## The Story\\n\\n![Sample Message Broker App](/img/blog/rabbitmq/message-brokers-app.png)\\n\\nImagine we\'re building a simple e-commerce application. When a customer places an order, it\'s not instantly whisked away by elves. Instead, the order details \u2013 a message filled with product information, shipping address, and payment details \u2013 gets sent to a queue managed by a message broker.\\n\\nMeanwhile, our order processing system sits like a hungry rabbit, constantly checking the queue for new messages. Once it grabs an order message, it springs into action: verifying payment, notifying the warehouse, and sending updates to the customer. All without the two systems ever needing to directly talk to each other!\\n\\nThis decoupling is the superpower of message brokers. Applications don\'t need to know the specifics of each other\'s internal workings. They simply send and receive messages, leaving the orchestration to the broker. This makes systems more flexible, scalable, and resilient.\\n\\nLet\'s delve deeper into this rabbit hole, using RabbitMQ as our trusty guide.\\n\\n## The Technology\\n\\nRabbitMQ is a popular open-source message broker, and it\'s a great starting point to understand the magic behind these event-driven systems.\\n\\n- It is used worldwide at small startups and large enterprises.\\n- It is lightweight and easy to deploy on premises and in the cloud.\\n- It can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.\\n- It runs on many operating systems and cloud environments, and provides a wide range of developer tools for most popular languages.\\n\\n### The Concepts\\n\\n![RabbitMQ Concepts](https://www.rabbitmq.com/img/tutorials/python-three.png)\\n\\n- Message: It is the fundamental unit of communication in RabbitMQ. It contains the data being sent from the producer to the consumer. It is like a post carrying a message.\\n- Producer: A producer is an application or component that sends messages to RabbitMQ. It is like a person sending the post.\\n- Consumer: A consumer is an application or component that receives and processes messages from RabbitMQ. It is a person receiving the post.\\n- Queue: A queue is a buffer that stores messages until they are consumed. Messages are placed in queues by producers and retrieved by consumers. It is a postbox that stores messages of a person.\\n- Exchange: An exchange is a routing mechanism that receives messages from producers and routes them to queues. It is like a post office.\\n- Routing Key: A routing key is a property of a message that is used by exchanges to determine which queues should receive the message. This is like a mailing address for a post.\\n\\n## The Tutorial\\n\\n### Generate prototype from WeDAA\\n\\nUse below Architecture as reference and generate a project from [WeDAA](https://app.wedaa.tech/canvastocode)\\n\\n![Sample RabbitMQ WeDAA Architecture](/img/blog/rabbitmq/rabbitmq-demo-arch.png)\\n\\n### RabbitMQ Configuration\\n\\n**RabbitMQConfigOrdersToInventory** class in orders service registers Queue, Exchange, Binding and Message Converters are as beans for auto-configuration in Spring AMPQ.\\n\\n```java\\n@Configuration\\npublic class RabbitMQConfigOrdersToInventory {\\n\\n    public static final String QUEUE = \\"OrdersToInventory_message_queue\\";\\n    public static final String EXCHANGE = \\"OrdersToInventory_message_exchange\\";\\n    public static final String ROUTING_KEY = \\"OrdersToInventory_message_routingKey\\";\\n\\n    @Bean\\n    public Queue queueOrdersToInventory() {\\n        return new Queue(QUEUE);\\n    }\\n\\n    @Bean\\n    public TopicExchange exchangeOrdersToInventory() {\\n        return new TopicExchange(EXCHANGE);\\n    }\\n\\n    @Bean\\n    public Binding bindingOrdersToInventory() {\\n        return BindingBuilder.bind(this.queueOrdersToInventory()).to(this.exchangeOrdersToInventory()).with(ROUTING_KEY);\\n    }\\n\\n    @Bean\\n    public MessageConverter messageConverter() {\\n        return new Jackson2JsonMessageConverter();\\n    }\\n\\n    @Bean\\n    public AmqpTemplate template(ConnectionFactory connectionFactory) {\\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\\n        template.setMessageConverter(messageConverter());\\n        return template;\\n    }\\n}\\n```\\n\\n### Message Producer\\n\\n**RabbitMQProducerOrdersToInventory** class in orders service sends a message to the exchange every 15 seconds.\\n\\n```java\\n@Scheduled(cron = \\"0/15 * * * * *\\")\\npublic void publishMessage() {\\n    RabbitMessageModel message = new RabbitMessageModel();\\n    message.setMessage(\\"Publishing this message from orders with key: \\" + RabbitMQConfigOrdersToInventory.QUEUE);\\n    message.setDateTime(new Date());\\n    template.convertAndSend(RabbitMQConfigOrdersToInventory.EXCHANGE, RabbitMQConfigOrdersToInventory.ROUTING_KEY, message);\\n    logger.info(\\"Message Published Successfully\\");\\n}\\n```\\n\\n### Message Consumer\\n\\n**RabbitMQConsumerOrdersToInventory** in the inventory service starts receiving the messages as the messages are sent by the Producer.\\n\\n```go\\nmsgs, err := channel.Consume(\\n    queueName,\\n    \\"\\",\\n    true,\\n    false,\\n    false,\\n    false,\\n    nil,\\n)\\n\\nforever := make(chan bool)\\ngo func() {\\n    for d := range msgs {\\n        logger.Infof(\\"Received Message: %s\\\\n\\", d.Body)\\n    }\\n}()\\n<-forever\\n```\\n\\n### The execution\\n\\n1. Bootup the RabbitMQ server\\n   \\n   WeDAA provides dockerfile for starting RabbitMQ server quickly.\\n   It can be found in both inventory and orders service.\\n\\n   RabbitMQ server can be started using below command from orders service.\\n\\n   ```\\n   docker compose -f src/main/docker/rabbitmq.yml up --wait\\n   ```\\n\\n   RabbitMQ\'s management console can be accessed on http://localhost:15672/\\n\\n   Default username: *guest*, password: *guest*\\n\\n2. Start the orders service\\n   \\n   In the sample architecture, orders service acts as producer.\\n   Start the service using the following command\\n   ```\\n   ./mvnw\\n   ```\\n   Once the service is started, it can be seen from the logs that messages are sent periodically.\\n   ```\\n    2024-01-15T20:35:00.015+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \\n    2024-01-15T20:35:15.008+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \\n    2024-01-15T20:35:30.003+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \\n    2024-01-15T20:35:45.002+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \\n   ```\\n\\n3. Start the inventory service\\n\\n   In the sample architecture, inventory service acts as consumer.\\n\\n   Build and start the service using the following commands\\n   ```\\n   go mod tidy\\n   go run .\\n   ```\\n   Once started, inventory service starts consuming the messages sent by orders service.\\n\\n   ```\\n    2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {\\"id\\":1,\\"message\\":\\"Publishing this message from orders with key: OrdersToInventory_message_queue\\",\\"dateTime\\":1705331085013}\\n    2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {\\"id\\":2,\\"message\\":\\"Publishing this message from orders with key: OrdersToInventory_message_queue\\",\\"dateTime\\":1705331100012}\\n    2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {\\"id\\":3,\\"message\\":\\"Publishing this message from orders with key: OrdersToInventory_message_queue\\",\\"dateTime\\":1705331115005}\\n    2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {\\"id\\":4,\\"message\\":\\"Publishing this message from orders with key: OrdersToInventory_message_queue\\",\\"dateTime\\":1705331130001}\\n   ```\\n\\n4. Track activity on RabbitMQ management console\\n\\n![RabbitMQ Exchange](/img/blog/rabbitmq/exchange.png)\\n\\n![RabbitMQ Queue](/img/blog/rabbitmq/queue.png)\\n\\n## The Conclusion\\n\\nThis blog gives a head start on making use of RabbitMQ to orchestrate your event-driven microservice application architectures.\\n\\nLearn more from: https://www.rabbitmq.com/getstarted.html"},{"id":"/2023/12/26/Intergating-keycloak-with-react-app","metadata":{"permalink":"/docs/blog/2023/12/26/Intergating-keycloak-with-react-app","source":"@site/blog/2023-12-26-Intergating-keycloak-with-react-app.md","title":"Securing React applications with Keycloak","description":"Intergating Keycloak with React app with \\"react-oidc-context\\"","date":"2023-12-26T00:00:00.000Z","formattedDate":"December 26, 2023","tags":[{"label":"keycloak","permalink":"/docs/blog/tags/keycloak"},{"label":"react","permalink":"/docs/blog/tags/react"},{"label":"authentication","permalink":"/docs/blog/tags/authentication"},{"label":"prototyping","permalink":"/docs/blog/tags/prototyping"},{"label":"boilerplate","permalink":"/docs/blog/tags/boilerplate"}],"readingTime":5.52,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Securing React applications with Keycloak","description":"Intergating Keycloak with React app with \\"react-oidc-context\\"","image":"https://i.imgur.com/jtapJ0a.png","tags":["keycloak","react","authentication","prototyping","boilerplate"],"date":"2023-12-26T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Event driven Architectures with RabbitMQ","permalink":"/docs/blog/2024/01/15/rabbitmq"},"nextItem":{"title":"Transitioning from Boilerplate Development to Scaffolding Frameworks","permalink":"/docs/blog/2023/11/11/boilerplate-to-scaffolding"}},"content":"In the fast-paced world of web development, prioritizing the security of our applications is paramount. This blog post takes you on a journey to enhance the security of your React app by seamlessly integrating it with [**Keycloak**](https://www.keycloak.org/documentation), a robust authentication and authorization server. To simplify this process, we\'ll leverage the npm package [**react-oidc-context**](https://www.npmjs.com/package/react-oidc-context), bridging React and Keycloak while implementing OpenID Connect (OIDC). Whether you\'re a seasoned developer or just stepping into React and authentication, this post provides practical insights to bolster the security posture of your web application. Let\'s dive into the world of React, Keycloak, and react-oidc-context for a more secure development experience.\\n\\n### \ud83d\ude80 Quickstart:\\n\\n1. Visit [**app.wedaa.tech**](https://app.wedaa.tech/)\\n\\n2. Click on the \\"Static Web page\\" component\\n\\n   ![Choose Framework](https://i.imgur.com/aCPQE39.png)\\n\\n3. Select a frontend framework: React, then click next\\n\\n   ![Choose React](https://i.imgur.com/ROlem4b.png)\\n\\n4. Choose Authentication and Authorization: Keycloak, then click Next \\n\\n   ![Choose Keycloak](https://i.imgur.com/3dX4Ttc.png)\\n\\n5. Review your project composition and confirm by clicking \\"Go to Canvas\\"\\n\\n   ![Review Composition](https://i.imgur.com/KNTDOUt.png)\\n\\n6. Provide a valid name to your prototype and click on \\"Validate\\"\\n\\n   ![Prototype Validation](https://i.imgur.com/FVw7YEp.png)\\n\\n7. Review your prototype configuration, then click Next\\n\\n   ![Prototype Configuration](https://i.imgur.com/NYlY6pF.png)\\n\\n8. Finally, click \\"Generate Code\\" to download the secured React application\\n\\n   ![Generate Code](https://i.imgur.com/kJiRTHB.png)\\n\\n\\n\\nWeDAA offers a pre-configured React application secured by Keycloak. Simply extract our application, follow the instructions in the README, and initiate your application to seamlessly experience it first-hand.\\n\\n### \ud83e\udde0 Understanding the Generated Code \\n\\n1. src/index.js\\n\\n```jsx\\n// Code for initializing React application with authentication and authorization capabilities.\\nimport React from \'react\';\\nimport ReactDOM from \'react-dom/client\';\\nimport \'./index.css\';\\nimport App from \'./App\';\\nimport reportWebVitals from \'./reportWebVitals\';\\nimport { AuthProvider } from \'react-oidc-context\';\\n\\nconst oidcConfig = {\\n  authority: process.env.REACT_APP_OIDC_AUTHORITY,\\n  client_id: process.env.REACT_APP_OIDC_CLIENT_ID,\\n  redirect_uri: process.env.REACT_APP_PROJECT_URL,\\n  // ...\\n};\\n\\nconst root = ReactDOM.createRoot(document.getElementById(\'root\'));\\nroot.render(\\n  <AuthProvider {...oidcConfig}>\\n    <App />\\n  </AuthProvider>\\n);\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\\n\\n```\\n\\n- This code initializes a React application with authentication and authorization capabilities using the [**react-oidc-context**](https://www.npmjs.com/package/react-oidc-context) library.\\n\\n- The main application (App) is wrapped in an AuthProvider with configurations derived from the OIDC parameters specified in the oidcConfig object.\\n\\n- The oidcConfig object contains configuration parameters required for OpenID Connect authentication.\\n\\n- Environment variables (```REACT_APP_OIDC_AUTHORITY, REACT_APP_OIDC_CLIENT_ID, and REACT_APP_PROJECT_URL```) are used to dynamically set these values.\\n\\n2. dotenv (.env file)\\n\\n```jsx\\n// Environment variables for configuring the React application.\\nPORT=4200\\nGENERATE_SOURCEMAP=false\\n\\nREACT_APP_PROJECT_NAME=webapp\\nREACT_APP_PROJECT_URL=http://localhost:4200\\n\\n\\n# WEDAA \\nREACT_APP_WEDAA_DOCS=https://wedaa-tech.github.io\\nREACT_APP_WEDAA_GITHUB=https://github.com/wedaa-tech\\n\\n# OIDC Configuration\\nREACT_APP_OIDC_AUTHORITY=http://localhost:9080/realms/jhipster\\nREACT_APP_OIDC_CLIENT_ID=web_app\\n\\n```\\n\\n3. src/config/auth/privateRoute.js\\n\\n```jsx\\n// Code for defining a PrivateRoute component for protecting routes based on authentication status.\\nimport React from \'react\';\\nimport { useAuth } from \'react-oidc-context\';\\n\\nconst PrivateRoute = ({ children }) => {\\n  const auth = useAuth();\\n\\n  switch (auth.activeNavigator) {\\n    case \'signinSilent\':\\n      return <div>Signing you in...</div>;\\n    case \'signoutRedirect\':\\n      return <div>Signing you out...</div>;\\n  }\\n\\n  if (auth.isLoading) {\\n    // <div>Loading...</div>;\\n    return <div></div>;\\n  }\\n\\n  if (auth.error) {\\n    return <div>Oops... {auth.error.message}</div>;\\n  }\\n  if (!auth.isAuthenticated) {\\n    let originPath = window.location.pathname;\\n    auth.signinRedirect({\\n      redirect_uri: process.env.REACT_APP_PROJECT_URL.concat(originPath),\\n    });\\n  }\\n\\n  if (auth.isAuthenticated) {\\n    window.history.replaceState({}, document.title, window.location.pathname);\\n    return <>{children}</>;\\n  }\\n};\\n\\nexport default PrivateRoute;\\n\\n```\\n\\n- This code defines a React component called PrivateRoute that serves as a wrapper for protecting certain routes in your application based on authentication status. \\n\\n- The PrivateRoute component takes a children prop, which represents the content that should be rendered if the user is authenticated.\\n\\n- Switch statement checks the activeNavigator property in the authentication context. If the user is in the process of a silent sign-in or sign-out redirect, it displays a corresponding message.\\n\\n- If the authentication context is still loading, the component returns an empty div (essentially doing nothing until authentication data is available).\\n\\n- If the user is not authenticated, it initiates a redirection to the authentication server using the signinRedirect method. It also captures the current path to redirect the user back to the intended page after authentication.\\n\\n- If the user is authenticated, it updates the browser history to remove sensitive information and renders the original children content.\\n\\n4. docker/\\n\\n```\\n|_docker\\n    |_realm-config\\n            |_jhipster-realm.json\\n    |_keycloak.yml\\n```\\n\\n- The Docker directory houses a Docker Compose configuration for Keycloak. This configuration initiates a Keycloak container that serves as the authentication server for our React application.\\n\\n- Within the docker/realm-config directory, there is a JSON-formatted realm configuration. This information, presented in JSON format, is essential for our React application as it serves as the OIDC (OpenID Connect) configuration.\\n\\n\\n### \ud83d\udea6 Getting Started\\n\\n1. Start the keycloak server\\n```\\nnpm run docker:keycloak:up\\n```\\n\\n2. Install dependencies for the first time.\\n```\\nnpm install\\n```\\n\\n3. Start you React application\\n```\\nnpm start\\n```\\n\\n### \ud83d\udcf8 Example images in action\\n\\n1. Home page of the React application generated via WeDAA.\\n\\n   ![Home page](https://i.imgur.com/WPwAEL9.png)\\n\\n2. Login Page for the React application powered by keycloak (click on the sign in button to land on this page, by default two users are provided [user,admin]; password is same as username).\\n\\n   ![Login Page](https://i.imgur.com/betJU5z.png)\\n\\n3. Home page after sucessful Login.\\n\\n   ![Logged In Home page](https://i.imgur.com/RuRXzHs.png)\\n\\n## \u2728 Conclusion\\n\\nCongratulations! \ud83c\udf89 You\'ve successfully navigated the realm of securing your React applications with the formidable duo of Keycloak and `react-oidc-context`. As you embark on your coding journey, armed with a fortified understanding of authentication and authorization, here\'s a recap of your key accomplishments:\\n\\n- Seamlessly integrated Keycloak as the authentication and authorization powerhouse.\\n- Leveraged the elegance of `react-oidc-context` to bridge the realms of React and OpenID Connect.\\n- Initiated a secure React application that not only prioritizes user experience but also champions data protection.\\n\\n### \ud83d\ude80 Quick Dive\\n\\nBefore you go, let\'s take one last glance at the live example you\'ve created. Head over to [**app.wedaa.tech**](https://app.wedaa.tech/) and witness your React application in action. From dynamic prototyping to authentication magic, your creation stands as a testament to your development prowess.\\n\\n### \ud83d\udee0\ufe0f Further Exploration\\n\\nAs you continue your coding adventures, explore the depths of the generated code. Whether it\'s delving into the intricacies of `src/index.js`, configuring environment variables in `.env`, or understanding the protective dance of `src/config/auth/privateRoute.js`, every line of code tells a story of security, creativity, and innovation.\\n\\n### \ud83c\udf10 Beyond the Horizon\\n\\nFor more insights and documentation, sail over to the [**WeDAA Documentation**](https://www.wedaa.tech/docs/introduction/what-is-wedaa/) and explore the GitHub repository at [**github.com/wedaa-tech**](https://github.com/wedaa-tech). Your journey doesn\'t end here \u2013 it\'s a launching pad for future projects, collaborations, and secure web development endeavors.\\n\\n## \ud83d\ude80 Ready, Set, Code!\\n\\nArmed with the knowledge and hands-on experience gained in this blog post, you\'re now equipped to conquer the world of React security. Start your engines, dive into the code, and let your creativity unfold. Happy coding, and may your React applications always be secure and splendid! \ud83c\udf1f"},{"id":"/2023/11/11/boilerplate-to-scaffolding","metadata":{"permalink":"/docs/blog/2023/11/11/boilerplate-to-scaffolding","source":"@site/blog/2023-11-11-boilerplate-to-scaffolding.md","title":"Transitioning from Boilerplate Development to Scaffolding Frameworks","description":"Transitioning from Boilerplate Development to Scaffolding Frameworks","date":"2023-11-11T00:00:00.000Z","formattedDate":"November 11, 2023","tags":[{"label":"prototyping","permalink":"/docs/blog/tags/prototyping"},{"label":"boilerplate","permalink":"/docs/blog/tags/boilerplate"}],"readingTime":1.95,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Transitioning from Boilerplate Development to Scaffolding Frameworks","description":"Transitioning from Boilerplate Development to Scaffolding Frameworks","image":"https://www.wedaa.tech/docs/img/first-blog-post.png","tags":["prototyping","boilerplate"],"date":"2023-11-11T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Securing React applications with Keycloak","permalink":"/docs/blog/2023/12/26/Intergating-keycloak-with-react-app"}},"content":"In our ever-evolving tech landscape, we continually encounter new tools and technologies for constructing common software structures. With technology\'s daily progress, we witness fresh parameters and approaches applied to our existing setups.\\n \\nTo draw a parallel, consider the preparation of a delectable Biryani. The first step is to gather the right ingredients before diving into cooking. Spices, curd, salt, rice, and, of course, gasoline are essential. Most of these ingredients remain constant for everyone, while the art of cooking is what distinguishes one chef from another. Given that the ingredients remain the same, isn\'t it impractical to painstakingly prepare them from scratch each time we crave Biryani? It certainly is.\\n \\nIn contrast to the culinary world, in software engineering, we often find ourselves writing and configuring all components from scratch each time we embark on building a software solution.\\n \\nLet\'s consider a hypothetical scenario in software engineering: creating a full-stack application. It entails the development of numerous microservices, handling discovery, gateway, and inter-service communication. Additionally, we must set up logging, observability, security, and privacy mechanisms. Now, ponder this: countless others have undertaken these exact same tasks tens of thousands of times. Isn\'t it time to rethink our approach and prepare and assemble common technical components in advance, much like having essential spices ready when cooking Biryani.\\n \\nStarting from scratch each time leads to complications, extended development timelines, and monotony. As a software project expands and requires more boilerplate code, a developer\'s workload becomes increasingly burdensome. We must simultaneously ensure a solid foundation for our application\'s architecture. So, the question arises: where do we seek a solution? The answer lies in a scaffolding platform, where we build common components once and assemble them as needed.\\n \\nScaffolding represents a modern approach to generating the common building blocks of an application and configuring them to meet the software requirements. An effective scaffold might encompass features such as login and registration pages, service and server connections, routing, discovery, model templates, controllers, security, privacy, and observability mechanisms.\\n \\nThe next time you embark on application development, consider WeDAA, a platform designed for rapid prototyping and scaffolding of technologies and applications.\\n \\nWhat You\'ll Achieve:\\n \\nExpedited proposal development.\\nUnified systems for design, configurations, and asset control.\\nEnhanced security and privacy standards right from the start.\\nMore time to focus on your unique business case rather than common tasks.\\""}]}')}}]);