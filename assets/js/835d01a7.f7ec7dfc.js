"use strict";(self.webpackChunkdocusaurus_documentation=self.webpackChunkdocusaurus_documentation||[]).push([[7693],{70:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(5893),t=n(1151);const i={title:"Build event driven Microservice Architectures with RabbitMQ",description:"Build event driven Microservice Architectures with RabbitMQ",image:"https://www.wedaa.tech/docs/img/blog/rabbitmq/rabbitmq.png",tags:["microservices","messagebrokers","rabbitmq","eventdriven","architecture"],date:new Date("2024-01-15T00:00:00.000Z")},a=void 0,o={permalink:"/docs/blog/2024/01/15/rabbitmq",source:"@site/blog/2024-01-15-rabbitmq.md",title:"Build event driven Microservice Architectures with RabbitMQ",description:"Build event driven Microservice Architectures with RabbitMQ",date:"2024-01-15T00:00:00.000Z",formattedDate:"January 15, 2024",tags:[{label:"microservices",permalink:"/docs/blog/tags/microservices"},{label:"messagebrokers",permalink:"/docs/blog/tags/messagebrokers"},{label:"rabbitmq",permalink:"/docs/blog/tags/rabbitmq"},{label:"eventdriven",permalink:"/docs/blog/tags/eventdriven"},{label:"architecture",permalink:"/docs/blog/tags/architecture"}],readingTime:4.65,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Build event driven Microservice Architectures with RabbitMQ",description:"Build event driven Microservice Architectures with RabbitMQ",image:"https://www.wedaa.tech/docs/img/blog/rabbitmq/rabbitmq.png",tags:["microservices","messagebrokers","rabbitmq","eventdriven","architecture"],date:"2024-01-15T00:00:00.000Z"},unlisted:!1,nextItem:{title:"Securing React applications with Keycloak",permalink:"/docs/blog/2023/12/26/Intergating-keycloak-with-react-app"}},c={authorsImageUrls:[]},d=[{value:"The Story",id:"the-story",level:2},{value:"The Technology",id:"the-technology",level:2},{value:"The Concepts",id:"the-concepts",level:3},{value:"The Tutorial",id:"the-tutorial",level:2},{value:"Generate prototype from WeDAA",id:"generate-prototype-from-wedaa",level:3},{value:"RabbitMQ Configuration",id:"rabbitmq-configuration",level:3},{value:"Message Producer",id:"message-producer",level:3},{value:"Message Consumer",id:"message-consumer",level:3},{value:"The execution",id:"the-execution",level:3},{value:"The Conclusion",id:"the-conclusion",level:2}];function l(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"the-story",children:"The Story"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Sample Message Broker App",src:n(8971).Z+"",width:"3388",height:"1408"})}),"\n",(0,r.jsx)(s.p,{children:"Imagine we're building a simple e-commerce application. When a customer places an order, it's not instantly whisked away by elves. Instead, the order details \u2013 a message filled with product information, shipping address, and payment details \u2013 gets sent to a queue managed by a message broker."}),"\n",(0,r.jsx)(s.p,{children:"Meanwhile, our order processing system sits like a hungry rabbit, constantly checking the queue for new messages. Once it grabs an order message, it springs into action: verifying payment, notifying the warehouse, and sending updates to the customer. All without the two systems ever needing to directly talk to each other!"}),"\n",(0,r.jsx)(s.p,{children:"This decoupling is the superpower of message brokers. Applications don't need to know the specifics of each other's internal workings. They simply send and receive messages, leaving the orchestration to the broker. This makes systems more flexible, scalable, and resilient."}),"\n",(0,r.jsx)(s.p,{children:"Let's delve deeper into this rabbit hole, using RabbitMQ as our trusty guide."}),"\n",(0,r.jsx)(s.h2,{id:"the-technology",children:"The Technology"}),"\n",(0,r.jsx)(s.p,{children:"RabbitMQ is a popular open-source message broker, and it's a great starting point to understand the magic behind these event-driven systems."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"It is used worldwide at small startups and large enterprises."}),"\n",(0,r.jsx)(s.li,{children:"It is lightweight and easy to deploy on premises and in the cloud."}),"\n",(0,r.jsx)(s.li,{children:"It can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements."}),"\n",(0,r.jsx)(s.li,{children:"It runs on many operating systems and cloud environments, and provides a wide range of developer tools for most popular languages."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"the-concepts",children:"The Concepts"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://www.rabbitmq.com/img/tutorials/python-three.png",alt:"RabbitMQ Concepts"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Message: It is the fundamental unit of communication in RabbitMQ. It contains the data being sent from the producer to the consumer. It is like a post carrying a message."}),"\n",(0,r.jsx)(s.li,{children:"Producer: A producer is an application or component that sends messages to RabbitMQ. It is like a person sending the post."}),"\n",(0,r.jsx)(s.li,{children:"Consumer: A consumer is an application or component that receives and processes messages from RabbitMQ. It is a person receiving the post."}),"\n",(0,r.jsx)(s.li,{children:"Queue: A queue is a buffer that stores messages until they are consumed. Messages are placed in queues by producers and retrieved by consumers. It is a postbox that stores messages of a person."}),"\n",(0,r.jsx)(s.li,{children:"Exchange: An exchange is a routing mechanism that receives messages from producers and routes them to queues. It is like a post office."}),"\n",(0,r.jsx)(s.li,{children:"Routing Key: A routing key is a property of a message that is used by exchanges to determine which queues should receive the message. This is like a mailing address for a post."}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"the-tutorial",children:"The Tutorial"}),"\n",(0,r.jsx)(s.h3,{id:"generate-prototype-from-wedaa",children:"Generate prototype from WeDAA"}),"\n",(0,r.jsxs)(s.p,{children:["Use below Architecture as reference and generate a project from ",(0,r.jsx)(s.a,{href:"https://app.wedaa.tech/canvastocode",children:"WeDAA"})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"Sample RabbitMQ WeDAA Architecture",src:n(9259).Z+"",width:"1747",height:"860"})}),"\n",(0,r.jsx)(s.h3,{id:"rabbitmq-configuration",children:"RabbitMQ Configuration"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"RabbitMQConfigOrdersToInventory"})," class in orders service registers Queue, Exchange, Binding and Message Converters are as beans for auto-configuration in Spring AMPQ."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'@Configuration\npublic class RabbitMQConfigOrdersToInventory {\n\n    public static final String QUEUE = "OrdersToInventory_message_queue";\n    public static final String EXCHANGE = "OrdersToInventory_message_exchange";\n    public static final String ROUTING_KEY = "OrdersToInventory_message_routingKey";\n\n    @Bean\n    public Queue queueOrdersToInventory() {\n        return new Queue(QUEUE);\n    }\n\n    @Bean\n    public TopicExchange exchangeOrdersToInventory() {\n        return new TopicExchange(EXCHANGE);\n    }\n\n    @Bean\n    public Binding bindingOrdersToInventory() {\n        return BindingBuilder.bind(this.queueOrdersToInventory()).to(this.exchangeOrdersToInventory()).with(ROUTING_KEY);\n    }\n\n    @Bean\n    public MessageConverter messageConverter() {\n        return new Jackson2JsonMessageConverter();\n    }\n\n    @Bean\n    public AmqpTemplate template(ConnectionFactory connectionFactory) {\n        RabbitTemplate template = new RabbitTemplate(connectionFactory);\n        template.setMessageConverter(messageConverter());\n        return template;\n    }\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"message-producer",children:"Message Producer"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"RabbitMQProducerOrdersToInventory"})," class in orders service sends a message to the exchange every 15 seconds."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'@Scheduled(cron = "0/15 * * * * *")\npublic void publishMessage() {\n    RabbitMessageModel message = new RabbitMessageModel();\n    message.setMessage("Publishing this message from orders with key: " + RabbitMQConfigOrdersToInventory.QUEUE);\n    message.setDateTime(new Date());\n    template.convertAndSend(RabbitMQConfigOrdersToInventory.EXCHANGE, RabbitMQConfigOrdersToInventory.ROUTING_KEY, message);\n    logger.info("Message Published Successfully");\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"message-consumer",children:"Message Consumer"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"RabbitMQConsumerOrdersToInventory"})," in the inventory service starts receiving the messages as the messages are sent by the Producer."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-go",children:'msgs, err := channel.Consume(\n    queueName,\n    "",\n    true,\n    false,\n    false,\n    false,\n    nil,\n)\n\nforever := make(chan bool)\ngo func() {\n    for d := range msgs {\n        logger.Infof("Received Message: %s\\n", d.Body)\n    }\n}()\n<-forever\n'})}),"\n",(0,r.jsx)(s.h3,{id:"the-execution",children:"The execution"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Bootup the RabbitMQ server"}),"\n",(0,r.jsx)(s.p,{children:"WeDAA provides dockerfile for starting RabbitMQ server quickly.\nIt can be found in both inventory and orders service."}),"\n",(0,r.jsx)(s.p,{children:"RabbitMQ server can be started using below command from orders service."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"docker compose -f src/main/docker/rabbitmq.yml up --wait\n"})}),"\n",(0,r.jsxs)(s.p,{children:["RabbitMQ's management console can be accessed on ",(0,r.jsx)(s.a,{href:"http://localhost:15672/",children:"http://localhost:15672/"})]}),"\n",(0,r.jsxs)(s.p,{children:["Default username: ",(0,r.jsx)(s.em,{children:"guest"}),", password: ",(0,r.jsx)(s.em,{children:"guest"})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Start the orders service"}),"\n",(0,r.jsx)(s.p,{children:"In the sample architecture, orders service acts as producer.\nStart the service using the following command"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"./mvnw\n"})}),"\n",(0,r.jsx)(s.p,{children:"Once the service is started, it can be seen from the logs that messages are sent periodically."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:" 2024-01-15T20:35:00.015+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \n 2024-01-15T20:35:15.008+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \n 2024-01-15T20:35:30.003+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \n 2024-01-15T20:35:45.002+05:30  INFO 55955 --- [rs-scheduling-1] .o.c.r.RabbitMQProducerOrdersToInventory : Message Published Successfully \n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Start the inventory service"}),"\n",(0,r.jsx)(s.p,{children:"In the sample architecture, inventory service acts as consumer."}),"\n",(0,r.jsx)(s.p,{children:"Build and start the service using the following commands"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"go mod tidy\ngo run .\n"})}),"\n",(0,r.jsx)(s.p,{children:"Once started, inventory service starts consuming the messages sent by orders service."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:' 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":1,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331085013}\n 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":2,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331100012}\n 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":3,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331115005}\n 2024-01-15 20:41:33  file=rabbitmq/RabbitMQConsumerOrdersToInventory.go:51 level=info Received Message: {"id":4,"message":"Publishing this message from orders with key: OrdersToInventory_message_queue","dateTime":1705331130001}\n'})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Track activity on RabbitMQ management console"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"RabbitMQ Exchange",src:n(485).Z+"",width:"2036",height:"1320"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"RabbitMQ Queue",src:n(7050).Z+"",width:"2184",height:"1464"})}),"\n",(0,r.jsx)(s.h2,{id:"the-conclusion",children:"The Conclusion"}),"\n",(0,r.jsx)(s.p,{children:"This blog gives a head start on making use of RabbitMQ to orchestrate your event-driven microservice application architectures."}),"\n",(0,r.jsxs)(s.p,{children:["Learn more from: ",(0,r.jsx)(s.a,{href:"https://www.rabbitmq.com/getstarted.html",children:"https://www.rabbitmq.com/getstarted.html"})]})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},485:(e,s,n)=>{n.d(s,{Z:()=>r});const r=n.p+"assets/images/exchange-ec722c1ef354f4fbc7c49ea423a90dd6.png"},8971:(e,s,n)=>{n.d(s,{Z:()=>r});const r=n.p+"assets/images/message-brokers-app-ffb34699577c2083c49c9671356ac45b.png"},7050:(e,s,n)=>{n.d(s,{Z:()=>r});const r=n.p+"assets/images/queue-a76c8c5dc445c1d68b11dfddc14b7bed.png"},9259:(e,s,n)=>{n.d(s,{Z:()=>r});const r=n.p+"assets/images/rabbitmq-demo-arch-557b5ede1cf6c255db6267780471324d.png"},1151:(e,s,n)=>{n.d(s,{Z:()=>o,a:()=>a});var r=n(7294);const t={},i=r.createContext(t);function a(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);